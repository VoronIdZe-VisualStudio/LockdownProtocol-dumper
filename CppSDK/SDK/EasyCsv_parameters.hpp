#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EasyCsv

#include "Basic.hpp"

#include "EasyCsv_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function EasyCsv.EasyCSV.ConvertQuatStringToRotator
// 0x0028 (0x0028 - 0x0000)
struct EasyCSV_ConvertQuatStringToRotator final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_ConvertQuatStringToRotator) == 0x000008, "Wrong alignment on EasyCSV_ConvertQuatStringToRotator");
static_assert(sizeof(EasyCSV_ConvertQuatStringToRotator) == 0x000028, "Wrong size on EasyCSV_ConvertQuatStringToRotator");
static_assert(offsetof(EasyCSV_ConvertQuatStringToRotator, InString) == 0x000000, "Member 'EasyCSV_ConvertQuatStringToRotator::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_ConvertQuatStringToRotator, ReturnValue) == 0x000010, "Member 'EasyCSV_ConvertQuatStringToRotator::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.ConvertQuatStringToRotatorArray
// 0x0020 (0x0020 - 0x0000)
struct EasyCSV_ConvertQuatStringToRotatorArray final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_ConvertQuatStringToRotatorArray) == 0x000008, "Wrong alignment on EasyCSV_ConvertQuatStringToRotatorArray");
static_assert(sizeof(EasyCSV_ConvertQuatStringToRotatorArray) == 0x000020, "Wrong size on EasyCSV_ConvertQuatStringToRotatorArray");
static_assert(offsetof(EasyCSV_ConvertQuatStringToRotatorArray, InString) == 0x000000, "Member 'EasyCSV_ConvertQuatStringToRotatorArray::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_ConvertQuatStringToRotatorArray, ReturnValue) == 0x000010, "Member 'EasyCSV_ConvertQuatStringToRotatorArray::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.ConvertStringToQuat
// 0x0030 (0x0030 - 0x0000)
struct EasyCSV_ConvertStringToQuat final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_ConvertStringToQuat) == 0x000010, "Wrong alignment on EasyCSV_ConvertStringToQuat");
static_assert(sizeof(EasyCSV_ConvertStringToQuat) == 0x000030, "Wrong size on EasyCSV_ConvertStringToQuat");
static_assert(offsetof(EasyCSV_ConvertStringToQuat, InString) == 0x000000, "Member 'EasyCSV_ConvertStringToQuat::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_ConvertStringToQuat, ReturnValue) == 0x000010, "Member 'EasyCSV_ConvertStringToQuat::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.ConvertStringToQuatArray
// 0x0020 (0x0020 - 0x0000)
struct EasyCSV_ConvertStringToQuatArray final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_ConvertStringToQuatArray) == 0x000008, "Wrong alignment on EasyCSV_ConvertStringToQuatArray");
static_assert(sizeof(EasyCSV_ConvertStringToQuatArray) == 0x000020, "Wrong size on EasyCSV_ConvertStringToQuatArray");
static_assert(offsetof(EasyCSV_ConvertStringToQuatArray, InString) == 0x000000, "Member 'EasyCSV_ConvertStringToQuatArray::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_ConvertStringToQuatArray, ReturnValue) == 0x000010, "Member 'EasyCSV_ConvertStringToQuatArray::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.ConvertStringToRotator
// 0x0028 (0x0028 - 0x0000)
struct EasyCSV_ConvertStringToRotator final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_ConvertStringToRotator) == 0x000008, "Wrong alignment on EasyCSV_ConvertStringToRotator");
static_assert(sizeof(EasyCSV_ConvertStringToRotator) == 0x000028, "Wrong size on EasyCSV_ConvertStringToRotator");
static_assert(offsetof(EasyCSV_ConvertStringToRotator, InString) == 0x000000, "Member 'EasyCSV_ConvertStringToRotator::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_ConvertStringToRotator, ReturnValue) == 0x000010, "Member 'EasyCSV_ConvertStringToRotator::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.ConvertStringToRotatorArray
// 0x0020 (0x0020 - 0x0000)
struct EasyCSV_ConvertStringToRotatorArray final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_ConvertStringToRotatorArray) == 0x000008, "Wrong alignment on EasyCSV_ConvertStringToRotatorArray");
static_assert(sizeof(EasyCSV_ConvertStringToRotatorArray) == 0x000020, "Wrong size on EasyCSV_ConvertStringToRotatorArray");
static_assert(offsetof(EasyCSV_ConvertStringToRotatorArray, InString) == 0x000000, "Member 'EasyCSV_ConvertStringToRotatorArray::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_ConvertStringToRotatorArray, ReturnValue) == 0x000010, "Member 'EasyCSV_ConvertStringToRotatorArray::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.DoesStringRepresentContainer
// 0x0018 (0x0018 - 0x0000)
struct EasyCSV_DoesStringRepresentContainer final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EasyCSV_DoesStringRepresentContainer) == 0x000008, "Wrong alignment on EasyCSV_DoesStringRepresentContainer");
static_assert(sizeof(EasyCSV_DoesStringRepresentContainer) == 0x000018, "Wrong size on EasyCSV_DoesStringRepresentContainer");
static_assert(offsetof(EasyCSV_DoesStringRepresentContainer, InString) == 0x000000, "Member 'EasyCSV_DoesStringRepresentContainer::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_DoesStringRepresentContainer, ReturnValue) == 0x000010, "Member 'EasyCSV_DoesStringRepresentContainer::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.EscapeCharacters
// 0x0020 (0x0020 - 0x0000)
struct EasyCSV_EscapeCharacters final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_EscapeCharacters) == 0x000008, "Wrong alignment on EasyCSV_EscapeCharacters");
static_assert(sizeof(EasyCSV_EscapeCharacters) == 0x000020, "Wrong size on EasyCSV_EscapeCharacters");
static_assert(offsetof(EasyCSV_EscapeCharacters, InString) == 0x000000, "Member 'EasyCSV_EscapeCharacters::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_EscapeCharacters, ReturnValue) == 0x000010, "Member 'EasyCSV_EscapeCharacters::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.GetColumnAsStringArray
// 0x0098 (0x0098 - 0x0000)
struct EasyCSV_GetColumnAsStringArray final
{
public:
	struct FEasyCsvInfo                           CSV_Info;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ColumnName;                                        // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_GetColumnAsStringArray) == 0x000008, "Wrong alignment on EasyCSV_GetColumnAsStringArray");
static_assert(sizeof(EasyCSV_GetColumnAsStringArray) == 0x000098, "Wrong size on EasyCSV_GetColumnAsStringArray");
static_assert(offsetof(EasyCSV_GetColumnAsStringArray, CSV_Info) == 0x000000, "Member 'EasyCSV_GetColumnAsStringArray::CSV_Info' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetColumnAsStringArray, ColumnName) == 0x000070, "Member 'EasyCSV_GetColumnAsStringArray::ColumnName' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetColumnAsStringArray, Success) == 0x000080, "Member 'EasyCSV_GetColumnAsStringArray::Success' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetColumnAsStringArray, ReturnValue) == 0x000088, "Member 'EasyCSV_GetColumnAsStringArray::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.GetColumnCount
// 0x0078 (0x0078 - 0x0000)
struct EasyCSV_GetColumnCount final
{
public:
	struct FEasyCsvInfo                           CSV_Info;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EasyCSV_GetColumnCount) == 0x000008, "Wrong alignment on EasyCSV_GetColumnCount");
static_assert(sizeof(EasyCSV_GetColumnCount) == 0x000078, "Wrong size on EasyCSV_GetColumnCount");
static_assert(offsetof(EasyCSV_GetColumnCount, CSV_Info) == 0x000000, "Member 'EasyCSV_GetColumnCount::CSV_Info' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetColumnCount, ReturnValue) == 0x000070, "Member 'EasyCSV_GetColumnCount::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.GetFTextComponentsFromRepresentativeFString
// 0x0040 (0x0040 - 0x0000)
struct EasyCSV_GetFTextComponentsFromRepresentativeFString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameSpace;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceString;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_GetFTextComponentsFromRepresentativeFString) == 0x000008, "Wrong alignment on EasyCSV_GetFTextComponentsFromRepresentativeFString");
static_assert(sizeof(EasyCSV_GetFTextComponentsFromRepresentativeFString) == 0x000040, "Wrong size on EasyCSV_GetFTextComponentsFromRepresentativeFString");
static_assert(offsetof(EasyCSV_GetFTextComponentsFromRepresentativeFString, InString) == 0x000000, "Member 'EasyCSV_GetFTextComponentsFromRepresentativeFString::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetFTextComponentsFromRepresentativeFString, NameSpace) == 0x000010, "Member 'EasyCSV_GetFTextComponentsFromRepresentativeFString::NameSpace' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetFTextComponentsFromRepresentativeFString, Key) == 0x000020, "Member 'EasyCSV_GetFTextComponentsFromRepresentativeFString::Key' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetFTextComponentsFromRepresentativeFString, SourceString) == 0x000030, "Member 'EasyCSV_GetFTextComponentsFromRepresentativeFString::SourceString' has a wrong offset!");

// Function EasyCsv.EasyCSV.GetMapHeaders
// 0x0080 (0x0080 - 0x0000)
struct EasyCSV_GetMapHeaders final
{
public:
	struct FEasyCsvInfo                           CSV_Info;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_GetMapHeaders) == 0x000008, "Wrong alignment on EasyCSV_GetMapHeaders");
static_assert(sizeof(EasyCSV_GetMapHeaders) == 0x000080, "Wrong size on EasyCSV_GetMapHeaders");
static_assert(offsetof(EasyCSV_GetMapHeaders, CSV_Info) == 0x000000, "Member 'EasyCSV_GetMapHeaders::CSV_Info' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetMapHeaders, ReturnValue) == 0x000070, "Member 'EasyCSV_GetMapHeaders::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.GetMapKeyIndex
// 0x0080 (0x0080 - 0x0000)
struct EasyCSV_GetMapKeyIndex final
{
public:
	struct FEasyCsvInfo                           CSV_Info;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   Key;                                               // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EasyCSV_GetMapKeyIndex) == 0x000008, "Wrong alignment on EasyCSV_GetMapKeyIndex");
static_assert(sizeof(EasyCSV_GetMapKeyIndex) == 0x000080, "Wrong size on EasyCSV_GetMapKeyIndex");
static_assert(offsetof(EasyCSV_GetMapKeyIndex, CSV_Info) == 0x000000, "Member 'EasyCSV_GetMapKeyIndex::CSV_Info' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetMapKeyIndex, Key) == 0x000070, "Member 'EasyCSV_GetMapKeyIndex::Key' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetMapKeyIndex, ReturnValue) == 0x000078, "Member 'EasyCSV_GetMapKeyIndex::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.GetMapKeys
// 0x0080 (0x0080 - 0x0000)
struct EasyCSV_GetMapKeys final
{
public:
	struct FEasyCsvInfo                           CSV_Info;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_GetMapKeys) == 0x000008, "Wrong alignment on EasyCSV_GetMapKeys");
static_assert(sizeof(EasyCSV_GetMapKeys) == 0x000080, "Wrong size on EasyCSV_GetMapKeys");
static_assert(offsetof(EasyCSV_GetMapKeys, CSV_Info) == 0x000000, "Member 'EasyCSV_GetMapKeys::CSV_Info' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetMapKeys, ReturnValue) == 0x000070, "Member 'EasyCSV_GetMapKeys::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.GetRowAsStringArray
// 0x0090 (0x0090 - 0x0000)
struct EasyCSV_GetRowAsStringArray final
{
public:
	struct FEasyCsvInfo                           CSV_Info;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   RowKey;                                            // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0078(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_GetRowAsStringArray) == 0x000008, "Wrong alignment on EasyCSV_GetRowAsStringArray");
static_assert(sizeof(EasyCSV_GetRowAsStringArray) == 0x000090, "Wrong size on EasyCSV_GetRowAsStringArray");
static_assert(offsetof(EasyCSV_GetRowAsStringArray, CSV_Info) == 0x000000, "Member 'EasyCSV_GetRowAsStringArray::CSV_Info' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetRowAsStringArray, RowKey) == 0x000070, "Member 'EasyCSV_GetRowAsStringArray::RowKey' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetRowAsStringArray, Success) == 0x000078, "Member 'EasyCSV_GetRowAsStringArray::Success' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetRowAsStringArray, ReturnValue) == 0x000080, "Member 'EasyCSV_GetRowAsStringArray::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.GetRowCount
// 0x0078 (0x0078 - 0x0000)
struct EasyCSV_GetRowCount final
{
public:
	struct FEasyCsvInfo                           CSV_Info;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EasyCSV_GetRowCount) == 0x000008, "Wrong alignment on EasyCSV_GetRowCount");
static_assert(sizeof(EasyCSV_GetRowCount) == 0x000078, "Wrong size on EasyCSV_GetRowCount");
static_assert(offsetof(EasyCSV_GetRowCount, CSV_Info) == 0x000000, "Member 'EasyCSV_GetRowCount::CSV_Info' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetRowCount, ReturnValue) == 0x000070, "Member 'EasyCSV_GetRowCount::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.GetRowValueAsString
// 0x00A0 (0x00A0 - 0x0000)
struct EasyCSV_GetRowValueAsString final
{
public:
	struct FEasyCsvInfo                           CSV_Info;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ColumnName;                                        // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowKey;                                            // 0x0080(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0090(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_GetRowValueAsString) == 0x000008, "Wrong alignment on EasyCSV_GetRowValueAsString");
static_assert(sizeof(EasyCSV_GetRowValueAsString) == 0x0000A0, "Wrong size on EasyCSV_GetRowValueAsString");
static_assert(offsetof(EasyCSV_GetRowValueAsString, CSV_Info) == 0x000000, "Member 'EasyCSV_GetRowValueAsString::CSV_Info' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetRowValueAsString, ColumnName) == 0x000070, "Member 'EasyCSV_GetRowValueAsString::ColumnName' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetRowValueAsString, RowKey) == 0x000080, "Member 'EasyCSV_GetRowValueAsString::RowKey' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetRowValueAsString, Success) == 0x000088, "Member 'EasyCSV_GetRowValueAsString::Success' has a wrong offset!");
static_assert(offsetof(EasyCSV_GetRowValueAsString, ReturnValue) == 0x000090, "Member 'EasyCSV_GetRowValueAsString::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.LoadStringFromLocalFile
// 0x0028 (0x0028 - 0x0000)
struct EasyCSV_LoadStringFromLocalFile final
{
public:
	class FString                                 InPath;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutString;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EasyCSV_LoadStringFromLocalFile) == 0x000008, "Wrong alignment on EasyCSV_LoadStringFromLocalFile");
static_assert(sizeof(EasyCSV_LoadStringFromLocalFile) == 0x000028, "Wrong size on EasyCSV_LoadStringFromLocalFile");
static_assert(offsetof(EasyCSV_LoadStringFromLocalFile, InPath) == 0x000000, "Member 'EasyCSV_LoadStringFromLocalFile::InPath' has a wrong offset!");
static_assert(offsetof(EasyCSV_LoadStringFromLocalFile, OutString) == 0x000010, "Member 'EasyCSV_LoadStringFromLocalFile::OutString' has a wrong offset!");
static_assert(offsetof(EasyCSV_LoadStringFromLocalFile, ReturnValue) == 0x000020, "Member 'EasyCSV_LoadStringFromLocalFile::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.MakeCsvInfoStructFromFile
// 0x0088 (0x0088 - 0x0000)
struct EasyCSV_MakeCsvInfoStructFromFile final
{
public:
	class FString                                 InPath;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEasyCsvInfo                           OutCsvInfo;                                        // 0x0010(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ParseHeaders;                                      // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ParseKeys;                                         // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EasyCSV_MakeCsvInfoStructFromFile) == 0x000008, "Wrong alignment on EasyCSV_MakeCsvInfoStructFromFile");
static_assert(sizeof(EasyCSV_MakeCsvInfoStructFromFile) == 0x000088, "Wrong size on EasyCSV_MakeCsvInfoStructFromFile");
static_assert(offsetof(EasyCSV_MakeCsvInfoStructFromFile, InPath) == 0x000000, "Member 'EasyCSV_MakeCsvInfoStructFromFile::InPath' has a wrong offset!");
static_assert(offsetof(EasyCSV_MakeCsvInfoStructFromFile, OutCsvInfo) == 0x000010, "Member 'EasyCSV_MakeCsvInfoStructFromFile::OutCsvInfo' has a wrong offset!");
static_assert(offsetof(EasyCSV_MakeCsvInfoStructFromFile, ParseHeaders) == 0x000080, "Member 'EasyCSV_MakeCsvInfoStructFromFile::ParseHeaders' has a wrong offset!");
static_assert(offsetof(EasyCSV_MakeCsvInfoStructFromFile, ParseKeys) == 0x000081, "Member 'EasyCSV_MakeCsvInfoStructFromFile::ParseKeys' has a wrong offset!");
static_assert(offsetof(EasyCSV_MakeCsvInfoStructFromFile, ReturnValue) == 0x000082, "Member 'EasyCSV_MakeCsvInfoStructFromFile::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.MakeCsvInfoStructFromString
// 0x0088 (0x0088 - 0x0000)
struct EasyCSV_MakeCsvInfoStructFromString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEasyCsvInfo                           OutCsvInfo;                                        // 0x0010(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ParseHeaders;                                      // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ParseKeys;                                         // 0x0081(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0082(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x5];                                       // 0x0083(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EasyCSV_MakeCsvInfoStructFromString) == 0x000008, "Wrong alignment on EasyCSV_MakeCsvInfoStructFromString");
static_assert(sizeof(EasyCSV_MakeCsvInfoStructFromString) == 0x000088, "Wrong size on EasyCSV_MakeCsvInfoStructFromString");
static_assert(offsetof(EasyCSV_MakeCsvInfoStructFromString, InString) == 0x000000, "Member 'EasyCSV_MakeCsvInfoStructFromString::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_MakeCsvInfoStructFromString, OutCsvInfo) == 0x000010, "Member 'EasyCSV_MakeCsvInfoStructFromString::OutCsvInfo' has a wrong offset!");
static_assert(offsetof(EasyCSV_MakeCsvInfoStructFromString, ParseHeaders) == 0x000080, "Member 'EasyCSV_MakeCsvInfoStructFromString::ParseHeaders' has a wrong offset!");
static_assert(offsetof(EasyCSV_MakeCsvInfoStructFromString, ParseKeys) == 0x000081, "Member 'EasyCSV_MakeCsvInfoStructFromString::ParseKeys' has a wrong offset!");
static_assert(offsetof(EasyCSV_MakeCsvInfoStructFromString, ReturnValue) == 0x000082, "Member 'EasyCSV_MakeCsvInfoStructFromString::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.ReplaceEscapedCharacters
// 0x0020 (0x0020 - 0x0000)
struct EasyCSV_ReplaceEscapedCharacters final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EasyCSV_ReplaceEscapedCharacters) == 0x000008, "Wrong alignment on EasyCSV_ReplaceEscapedCharacters");
static_assert(sizeof(EasyCSV_ReplaceEscapedCharacters) == 0x000020, "Wrong size on EasyCSV_ReplaceEscapedCharacters");
static_assert(offsetof(EasyCSV_ReplaceEscapedCharacters, InString) == 0x000000, "Member 'EasyCSV_ReplaceEscapedCharacters::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_ReplaceEscapedCharacters, ReturnValue) == 0x000010, "Member 'EasyCSV_ReplaceEscapedCharacters::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.SaveStringToFile
// 0x0048 (0x0048 - 0x0000)
struct EasyCSV_SaveStringToFile final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InDirectory;                                       // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Extension;                                         // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EasyCSV_SaveStringToFile) == 0x000008, "Wrong alignment on EasyCSV_SaveStringToFile");
static_assert(sizeof(EasyCSV_SaveStringToFile) == 0x000048, "Wrong size on EasyCSV_SaveStringToFile");
static_assert(offsetof(EasyCSV_SaveStringToFile, InString) == 0x000000, "Member 'EasyCSV_SaveStringToFile::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_SaveStringToFile, InDirectory) == 0x000010, "Member 'EasyCSV_SaveStringToFile::InDirectory' has a wrong offset!");
static_assert(offsetof(EasyCSV_SaveStringToFile, Filename) == 0x000020, "Member 'EasyCSV_SaveStringToFile::Filename' has a wrong offset!");
static_assert(offsetof(EasyCSV_SaveStringToFile, Extension) == 0x000030, "Member 'EasyCSV_SaveStringToFile::Extension' has a wrong offset!");
static_assert(offsetof(EasyCSV_SaveStringToFile, ReturnValue) == 0x000040, "Member 'EasyCSV_SaveStringToFile::ReturnValue' has a wrong offset!");

// Function EasyCsv.EasyCSV.SaveStringToFileWithFullPath
// 0x0028 (0x0028 - 0x0000)
struct EasyCSV_SaveStringToFileWithFullPath final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InFullPath;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EasyCSV_SaveStringToFileWithFullPath) == 0x000008, "Wrong alignment on EasyCSV_SaveStringToFileWithFullPath");
static_assert(sizeof(EasyCSV_SaveStringToFileWithFullPath) == 0x000028, "Wrong size on EasyCSV_SaveStringToFileWithFullPath");
static_assert(offsetof(EasyCSV_SaveStringToFileWithFullPath, InString) == 0x000000, "Member 'EasyCSV_SaveStringToFileWithFullPath::InString' has a wrong offset!");
static_assert(offsetof(EasyCSV_SaveStringToFileWithFullPath, InFullPath) == 0x000010, "Member 'EasyCSV_SaveStringToFileWithFullPath::InFullPath' has a wrong offset!");
static_assert(offsetof(EasyCSV_SaveStringToFileWithFullPath, ReturnValue) == 0x000020, "Member 'EasyCSV_SaveStringToFileWithFullPath::ReturnValue' has a wrong offset!");

}

