#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FileToolkitX

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class FileToolkitX.FileToolkitXBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UFileToolkitXBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckFileModificationDate(const class FString& FilePath, const struct FDateTime& ReferenceDate);
	static bool CompareFileSizes(const class FString& FilePath1, const class FString& FilePath2, int64* Difference);
	static bool CopyFile(const class FString& SourceFilePath, const class FString& DestFilePath);
	static bool CreateJsonFile(const class FString& FilePath, const TMap<class FString, class FString>& Data);
	static bool DeleteDirectory(const class FString& DirectoryPath);
	static bool DeleteFileX(const class FString& FilePath);
	static bool DoesFileExist(const class FString& FilePath);
	static TMap<class FString, int64> GetAllFileSizes(const class FString& FolderPath);
	static int32 GetFileCount(const class FString& FolderPath);
	static bool GetFileModificationDate(const class FString& FilePath, struct FDateTime* OutModificationDate);
	static int64 GetFileSize(const class FString& FilePath);
	static bool IsFileReadOnly(const class FString& FilePath);
	static bool IsFolderEmpty(const class FString& FolderPath);
	static bool MoveFile(const class FString& SourceFilePath, const class FString& DestFilePath);
	static void PrintMapContents(const TMap<class FString, class FString>& MapToPrint, const struct FLinearColor& TextColor, float DisplayTime);
	static class FString ReadFileContent(const class FString& FilePath);
	static bool RunExeFile(const class FString& FilePath);
	static bool RunFileWithOptions(const class FString& InFilePath, const class FString& InArguments, bool InWithAdminRights);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FileToolkitXBPLibrary">();
	}
	static class UFileToolkitXBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFileToolkitXBPLibrary>();
	}
};
static_assert(alignof(UFileToolkitXBPLibrary) == 0x000008, "Wrong alignment on UFileToolkitXBPLibrary");
static_assert(sizeof(UFileToolkitXBPLibrary) == 0x000028, "Wrong size on UFileToolkitXBPLibrary");

// Class FileToolkitX.RunFileWithOptionsAsyncAction
// 0x0038 (0x0068 - 0x0030)
class URunFileWithOptionsAsyncAction final : public UBlueprintAsyncActionBase
{
public:
	TMulticastInlineDelegate<void(bool Success, const class FString& Message)> Completed;            // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x28];                                      // 0x0040(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class URunFileWithOptionsAsyncAction* RunFileWithOptionsAsync(const class FString& InFilePath, const class FString& InArguments, bool InWithAdminRights);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RunFileWithOptionsAsyncAction">();
	}
	static class URunFileWithOptionsAsyncAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<URunFileWithOptionsAsyncAction>();
	}
};
static_assert(alignof(URunFileWithOptionsAsyncAction) == 0x000008, "Wrong alignment on URunFileWithOptionsAsyncAction");
static_assert(sizeof(URunFileWithOptionsAsyncAction) == 0x000068, "Wrong size on URunFileWithOptionsAsyncAction");
static_assert(offsetof(URunFileWithOptionsAsyncAction, Completed) == 0x000030, "Member 'URunFileWithOptionsAsyncAction::Completed' has a wrong offset!");

}

