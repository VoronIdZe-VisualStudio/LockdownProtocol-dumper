#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Slider

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Slider.W_Slider_C
// 0x0170 (0x0440 - 0x02D0)
class UW_Slider_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ShowBackground;                                    // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UW_Trigger_C*                           All_Trigger;                                       // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Jauge;                                             // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Jauge_BG;                                          // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Jauge_Size;                                        // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SpinBox;                                           // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Text_BG;                                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        Text_Switcher;                                     // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               TextZone_Size;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ValueText;                                         // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_NameLine_C*                          W_NameLine;                                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Trigger_C*                           W_Trigger_Jauge;                                   // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Trigger_C*                           W_Trigger_Text;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Jauge_Hovered;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Set_Value;                                     // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Jauge_M;                                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UW_Menu_C*                              Parent;                                            // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Slide_Value;                                       // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Refresh;                                           // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_372[0x2];                                      // 0x0372(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Digit_Count;                                       // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Jauge_Exp;                                         // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Value;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Value;                                         // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Jauge_Speed;                                       // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Jauge_Boost;                                       // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Jauge_Min;                                         // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Jauge_Max;                                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double Value)>  On_Value_Change;                                   // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double Value)>  On_Confirm_Value;                                  // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        Last_Value;                                        // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Height;                                            // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Jauge_Width;                                       // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Text_Hovered;                                      // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        JaugeOpacity;                                      // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TextOpacity;                                       // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Text_Width;                                        // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Name_Width;                                        // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_414[0x4];                                      // 0x0414(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sharpness;                                         // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          All_Hovered;                                       // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        All_Opacity;                                       // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Detail;                                            // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)

public:
	double Range_Relative(double A);
	void Set_SpinSettings();
	void Round_Value(double* Result);
	void Update_Text();
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void BndEvt__W_Slider_SpinBox_K2Node_ComponentBoundEvent_0_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void BndEvt__W_Slider_W_Trigger_1_K2Node_ComponentBoundEvent_2_On_Pressed__DelegateSignature();
	void BndEvt__W_Slider_W_Trigger_Jauge_K2Node_ComponentBoundEvent_6_Hold_Tick__DelegateSignature(const struct FVector2D& Mouse_Delta);
	void BndEvt__W_Slider_SpinBox_K2Node_ComponentBoundEvent_7_OnSpinBoxValueChangedEvent__DelegateSignature(float InValue);
	void BndEvt__W_Slider_W_Trigger_Jauge_K2Node_ComponentBoundEvent_8_On_Released__DelegateSignature();
	void BndEvt__W_Slider_W_Trigger_Jauge_K2Node_ComponentBoundEvent_1_On_Enter__DelegateSignature();
	void BndEvt__W_Slider_W_Trigger_Jauge_K2Node_ComponentBoundEvent_3_On_Leave__DelegateSignature();
	void BndEvt__W_Slider_W_Trigger_Text_K2Node_ComponentBoundEvent_4_On_Enter__DelegateSignature();
	void BndEvt__W_Slider_W_Trigger_Text_K2Node_ComponentBoundEvent_5_On_Leave__DelegateSignature();
	void BndEvt__W_Slider_All_Trigger_K2Node_ComponentBoundEvent_9_On_Enter__DelegateSignature();
	void BndEvt__W_Slider_All_Trigger_K2Node_ComponentBoundEvent_10_On_Leave__DelegateSignature();
	void Set_Value(double Value_0);
	void ExecuteUbergraph_W_Slider(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Slider_C">();
	}
	static class UW_Slider_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Slider_C>();
	}
};
static_assert(alignof(UW_Slider_C) == 0x000008, "Wrong alignment on UW_Slider_C");
static_assert(sizeof(UW_Slider_C) == 0x000440, "Wrong size on UW_Slider_C");
static_assert(offsetof(UW_Slider_C, UberGraphFrame) == 0x0002D0, "Member 'UW_Slider_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, ShowBackground) == 0x0002D8, "Member 'UW_Slider_C::ShowBackground' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, All_Trigger) == 0x0002E0, "Member 'UW_Slider_C::All_Trigger' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge) == 0x0002E8, "Member 'UW_Slider_C::Jauge' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge_BG) == 0x0002F0, "Member 'UW_Slider_C::Jauge_BG' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge_Size) == 0x0002F8, "Member 'UW_Slider_C::Jauge_Size' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, SizeBox) == 0x000300, "Member 'UW_Slider_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, SpinBox) == 0x000308, "Member 'UW_Slider_C::SpinBox' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Text_BG) == 0x000310, "Member 'UW_Slider_C::Text_BG' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Text_Switcher) == 0x000318, "Member 'UW_Slider_C::Text_Switcher' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, TextZone_Size) == 0x000320, "Member 'UW_Slider_C::TextZone_Size' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, ValueText) == 0x000328, "Member 'UW_Slider_C::ValueText' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, W_NameLine) == 0x000330, "Member 'UW_Slider_C::W_NameLine' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, W_Trigger_Jauge) == 0x000338, "Member 'UW_Slider_C::W_Trigger_Jauge' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, W_Trigger_Text) == 0x000340, "Member 'UW_Slider_C::W_Trigger_Text' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge_Hovered) == 0x000348, "Member 'UW_Slider_C::Jauge_Hovered' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Value) == 0x000350, "Member 'UW_Slider_C::Value' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Can_Set_Value) == 0x000358, "Member 'UW_Slider_C::Can_Set_Value' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge_M) == 0x000360, "Member 'UW_Slider_C::Jauge_M' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Parent) == 0x000368, "Member 'UW_Slider_C::Parent' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Slide_Value) == 0x000370, "Member 'UW_Slider_C::Slide_Value' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Refresh) == 0x000371, "Member 'UW_Slider_C::Refresh' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Digit_Count) == 0x000374, "Member 'UW_Slider_C::Digit_Count' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge_Exp) == 0x000378, "Member 'UW_Slider_C::Jauge_Exp' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Min_Value) == 0x000380, "Member 'UW_Slider_C::Min_Value' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Max_Value) == 0x000388, "Member 'UW_Slider_C::Max_Value' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge_Speed) == 0x000390, "Member 'UW_Slider_C::Jauge_Speed' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge_Boost) == 0x000398, "Member 'UW_Slider_C::Jauge_Boost' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge_Min) == 0x0003A0, "Member 'UW_Slider_C::Jauge_Min' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge_Max) == 0x0003A8, "Member 'UW_Slider_C::Jauge_Max' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, On_Value_Change) == 0x0003B0, "Member 'UW_Slider_C::On_Value_Change' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, On_Confirm_Value) == 0x0003C0, "Member 'UW_Slider_C::On_Confirm_Value' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Last_Value) == 0x0003D0, "Member 'UW_Slider_C::Last_Value' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Height) == 0x0003D8, "Member 'UW_Slider_C::Height' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Jauge_Width) == 0x0003DC, "Member 'UW_Slider_C::Jauge_Width' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Text_Hovered) == 0x0003E0, "Member 'UW_Slider_C::Text_Hovered' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, JaugeOpacity) == 0x0003E8, "Member 'UW_Slider_C::JaugeOpacity' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, TextOpacity) == 0x0003F0, "Member 'UW_Slider_C::TextOpacity' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Text_Width) == 0x0003F8, "Member 'UW_Slider_C::Text_Width' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Name_0) == 0x000400, "Member 'UW_Slider_C::Name_0' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Name_Width) == 0x000410, "Member 'UW_Slider_C::Name_Width' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Sharpness) == 0x000418, "Member 'UW_Slider_C::Sharpness' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, All_Hovered) == 0x000420, "Member 'UW_Slider_C::All_Hovered' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, All_Opacity) == 0x000428, "Member 'UW_Slider_C::All_Opacity' has a wrong offset!");
static_assert(offsetof(UW_Slider_C, Detail) == 0x000430, "Member 'UW_Slider_C::Detail' has a wrong offset!");

}

