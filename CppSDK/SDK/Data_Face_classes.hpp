#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Data_Face

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Data_Skin_Element_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Data_Face.Data_Face_C
// 0x0070 (0x00E0 - 0x0070)
class UData_Face_C final : public UData_Skin_Element_C
{
public:
	class UTexture2D*                             Face_Texture;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Brows_Color;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Eye_Color;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Outline_Color;                                     // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           White_Color;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Horizontal_Division;                               // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Squint;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Squint;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Horizontal_Lock;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Vertical_Curve;                                    // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Data_Face_C">();
	}
	static class UData_Face_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UData_Face_C>();
	}
};
static_assert(alignof(UData_Face_C) == 0x000008, "Wrong alignment on UData_Face_C");
static_assert(sizeof(UData_Face_C) == 0x0000E0, "Wrong size on UData_Face_C");
static_assert(offsetof(UData_Face_C, Face_Texture) == 0x000070, "Member 'UData_Face_C::Face_Texture' has a wrong offset!");
static_assert(offsetof(UData_Face_C, Brows_Color) == 0x000078, "Member 'UData_Face_C::Brows_Color' has a wrong offset!");
static_assert(offsetof(UData_Face_C, Eye_Color) == 0x000088, "Member 'UData_Face_C::Eye_Color' has a wrong offset!");
static_assert(offsetof(UData_Face_C, Outline_Color) == 0x000098, "Member 'UData_Face_C::Outline_Color' has a wrong offset!");
static_assert(offsetof(UData_Face_C, White_Color) == 0x0000A8, "Member 'UData_Face_C::White_Color' has a wrong offset!");
static_assert(offsetof(UData_Face_C, Horizontal_Division) == 0x0000B8, "Member 'UData_Face_C::Horizontal_Division' has a wrong offset!");
static_assert(offsetof(UData_Face_C, Min_Squint) == 0x0000C0, "Member 'UData_Face_C::Min_Squint' has a wrong offset!");
static_assert(offsetof(UData_Face_C, Max_Squint) == 0x0000C8, "Member 'UData_Face_C::Max_Squint' has a wrong offset!");
static_assert(offsetof(UData_Face_C, Horizontal_Lock) == 0x0000D0, "Member 'UData_Face_C::Horizontal_Lock' has a wrong offset!");
static_assert(offsetof(UData_Face_C, Vertical_Curve) == 0x0000D8, "Member 'UData_Face_C::Vertical_Curve' has a wrong offset!");

}

