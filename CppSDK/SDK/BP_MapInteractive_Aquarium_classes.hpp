#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapInteractive_Aquarium

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapInteractive_Aquarium.BP_MapInteractive_Aquarium_C
// 0x0090 (0x0338 - 0x02A8)
class ABP_MapInteractive_Aquarium_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   AquariumFish_001;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Location;                                   // 0x02C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Jiggle_Value;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Jiggle_Speed;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta;                                             // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Jiggle_Side;                                       // 0x02EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Prv_Location;                                      // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Travel_Rotation;                                   // 0x0308(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Travel_Location;                                   // 0x0320(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MapInteractive_Aquarium(int32 EntryPoint);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapInteractive_Aquarium_C">();
	}
	static class ABP_MapInteractive_Aquarium_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MapInteractive_Aquarium_C>();
	}
};
static_assert(alignof(ABP_MapInteractive_Aquarium_C) == 0x000008, "Wrong alignment on ABP_MapInteractive_Aquarium_C");
static_assert(sizeof(ABP_MapInteractive_Aquarium_C) == 0x000338, "Wrong size on ABP_MapInteractive_Aquarium_C");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, UberGraphFrame) == 0x0002A8, "Member 'ABP_MapInteractive_Aquarium_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, AquariumFish_001) == 0x0002B0, "Member 'ABP_MapInteractive_Aquarium_C::AquariumFish_001' has a wrong offset!");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_MapInteractive_Aquarium_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, Target_Location) == 0x0002C0, "Member 'ABP_MapInteractive_Aquarium_C::Target_Location' has a wrong offset!");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, Jiggle_Value) == 0x0002D8, "Member 'ABP_MapInteractive_Aquarium_C::Jiggle_Value' has a wrong offset!");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, Jiggle_Speed) == 0x0002E0, "Member 'ABP_MapInteractive_Aquarium_C::Jiggle_Speed' has a wrong offset!");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, Delta) == 0x0002E8, "Member 'ABP_MapInteractive_Aquarium_C::Delta' has a wrong offset!");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, Jiggle_Side) == 0x0002EC, "Member 'ABP_MapInteractive_Aquarium_C::Jiggle_Side' has a wrong offset!");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, Prv_Location) == 0x0002F0, "Member 'ABP_MapInteractive_Aquarium_C::Prv_Location' has a wrong offset!");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, Travel_Rotation) == 0x000308, "Member 'ABP_MapInteractive_Aquarium_C::Travel_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_MapInteractive_Aquarium_C, Travel_Location) == 0x000320, "Member 'ABP_MapInteractive_Aquarium_C::Travel_Location' has a wrong offset!");

}

