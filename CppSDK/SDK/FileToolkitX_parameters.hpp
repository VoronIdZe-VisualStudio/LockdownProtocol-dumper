#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FileToolkitX

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function FileToolkitX.FileToolkitXBPLibrary.CheckFileModificationDate
// 0x0020 (0x0020 - 0x0000)
struct FileToolkitXBPLibrary_CheckFileModificationDate final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReferenceDate;                                     // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_CheckFileModificationDate) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_CheckFileModificationDate");
static_assert(sizeof(FileToolkitXBPLibrary_CheckFileModificationDate) == 0x000020, "Wrong size on FileToolkitXBPLibrary_CheckFileModificationDate");
static_assert(offsetof(FileToolkitXBPLibrary_CheckFileModificationDate, FilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_CheckFileModificationDate::FilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_CheckFileModificationDate, ReferenceDate) == 0x000010, "Member 'FileToolkitXBPLibrary_CheckFileModificationDate::ReferenceDate' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_CheckFileModificationDate, ReturnValue) == 0x000018, "Member 'FileToolkitXBPLibrary_CheckFileModificationDate::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.CompareFileSizes
// 0x0030 (0x0030 - 0x0000)
struct FileToolkitXBPLibrary_CompareFileSizes final
{
public:
	class FString                                 FilePath1;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath2;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Difference;                                        // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_CompareFileSizes) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_CompareFileSizes");
static_assert(sizeof(FileToolkitXBPLibrary_CompareFileSizes) == 0x000030, "Wrong size on FileToolkitXBPLibrary_CompareFileSizes");
static_assert(offsetof(FileToolkitXBPLibrary_CompareFileSizes, FilePath1) == 0x000000, "Member 'FileToolkitXBPLibrary_CompareFileSizes::FilePath1' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_CompareFileSizes, FilePath2) == 0x000010, "Member 'FileToolkitXBPLibrary_CompareFileSizes::FilePath2' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_CompareFileSizes, Difference) == 0x000020, "Member 'FileToolkitXBPLibrary_CompareFileSizes::Difference' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_CompareFileSizes, ReturnValue) == 0x000028, "Member 'FileToolkitXBPLibrary_CompareFileSizes::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.CopyFile
// 0x0028 (0x0028 - 0x0000)
struct FileToolkitXBPLibrary_CopyFile final
{
public:
	class FString                                 SourceFilePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestFilePath;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_CopyFile) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_CopyFile");
static_assert(sizeof(FileToolkitXBPLibrary_CopyFile) == 0x000028, "Wrong size on FileToolkitXBPLibrary_CopyFile");
static_assert(offsetof(FileToolkitXBPLibrary_CopyFile, SourceFilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_CopyFile::SourceFilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_CopyFile, DestFilePath) == 0x000010, "Member 'FileToolkitXBPLibrary_CopyFile::DestFilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_CopyFile, ReturnValue) == 0x000020, "Member 'FileToolkitXBPLibrary_CopyFile::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.CreateJsonFile
// 0x0068 (0x0068 - 0x0000)
struct FileToolkitXBPLibrary_CreateJsonFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Data;                                              // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_CreateJsonFile) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_CreateJsonFile");
static_assert(sizeof(FileToolkitXBPLibrary_CreateJsonFile) == 0x000068, "Wrong size on FileToolkitXBPLibrary_CreateJsonFile");
static_assert(offsetof(FileToolkitXBPLibrary_CreateJsonFile, FilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_CreateJsonFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_CreateJsonFile, Data) == 0x000010, "Member 'FileToolkitXBPLibrary_CreateJsonFile::Data' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_CreateJsonFile, ReturnValue) == 0x000060, "Member 'FileToolkitXBPLibrary_CreateJsonFile::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.DeleteDirectory
// 0x0018 (0x0018 - 0x0000)
struct FileToolkitXBPLibrary_DeleteDirectory final
{
public:
	class FString                                 DirectoryPath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_DeleteDirectory) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_DeleteDirectory");
static_assert(sizeof(FileToolkitXBPLibrary_DeleteDirectory) == 0x000018, "Wrong size on FileToolkitXBPLibrary_DeleteDirectory");
static_assert(offsetof(FileToolkitXBPLibrary_DeleteDirectory, DirectoryPath) == 0x000000, "Member 'FileToolkitXBPLibrary_DeleteDirectory::DirectoryPath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_DeleteDirectory, ReturnValue) == 0x000010, "Member 'FileToolkitXBPLibrary_DeleteDirectory::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.DeleteFileX
// 0x0018 (0x0018 - 0x0000)
struct FileToolkitXBPLibrary_DeleteFileX final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_DeleteFileX) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_DeleteFileX");
static_assert(sizeof(FileToolkitXBPLibrary_DeleteFileX) == 0x000018, "Wrong size on FileToolkitXBPLibrary_DeleteFileX");
static_assert(offsetof(FileToolkitXBPLibrary_DeleteFileX, FilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_DeleteFileX::FilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_DeleteFileX, ReturnValue) == 0x000010, "Member 'FileToolkitXBPLibrary_DeleteFileX::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.DoesFileExist
// 0x0018 (0x0018 - 0x0000)
struct FileToolkitXBPLibrary_DoesFileExist final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_DoesFileExist) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_DoesFileExist");
static_assert(sizeof(FileToolkitXBPLibrary_DoesFileExist) == 0x000018, "Wrong size on FileToolkitXBPLibrary_DoesFileExist");
static_assert(offsetof(FileToolkitXBPLibrary_DoesFileExist, FilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_DoesFileExist::FilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_DoesFileExist, ReturnValue) == 0x000010, "Member 'FileToolkitXBPLibrary_DoesFileExist::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.GetAllFileSizes
// 0x0060 (0x0060 - 0x0000)
struct FileToolkitXBPLibrary_GetAllFileSizes final
{
public:
	class FString                                 FolderPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, int64>                    ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileToolkitXBPLibrary_GetAllFileSizes) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_GetAllFileSizes");
static_assert(sizeof(FileToolkitXBPLibrary_GetAllFileSizes) == 0x000060, "Wrong size on FileToolkitXBPLibrary_GetAllFileSizes");
static_assert(offsetof(FileToolkitXBPLibrary_GetAllFileSizes, FolderPath) == 0x000000, "Member 'FileToolkitXBPLibrary_GetAllFileSizes::FolderPath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_GetAllFileSizes, ReturnValue) == 0x000010, "Member 'FileToolkitXBPLibrary_GetAllFileSizes::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.GetFileCount
// 0x0018 (0x0018 - 0x0000)
struct FileToolkitXBPLibrary_GetFileCount final
{
public:
	class FString                                 FolderPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_GetFileCount) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_GetFileCount");
static_assert(sizeof(FileToolkitXBPLibrary_GetFileCount) == 0x000018, "Wrong size on FileToolkitXBPLibrary_GetFileCount");
static_assert(offsetof(FileToolkitXBPLibrary_GetFileCount, FolderPath) == 0x000000, "Member 'FileToolkitXBPLibrary_GetFileCount::FolderPath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_GetFileCount, ReturnValue) == 0x000010, "Member 'FileToolkitXBPLibrary_GetFileCount::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.GetFileModificationDate
// 0x0020 (0x0020 - 0x0000)
struct FileToolkitXBPLibrary_GetFileModificationDate final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              OutModificationDate;                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_GetFileModificationDate) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_GetFileModificationDate");
static_assert(sizeof(FileToolkitXBPLibrary_GetFileModificationDate) == 0x000020, "Wrong size on FileToolkitXBPLibrary_GetFileModificationDate");
static_assert(offsetof(FileToolkitXBPLibrary_GetFileModificationDate, FilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_GetFileModificationDate::FilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_GetFileModificationDate, OutModificationDate) == 0x000010, "Member 'FileToolkitXBPLibrary_GetFileModificationDate::OutModificationDate' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_GetFileModificationDate, ReturnValue) == 0x000018, "Member 'FileToolkitXBPLibrary_GetFileModificationDate::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.GetFileSize
// 0x0018 (0x0018 - 0x0000)
struct FileToolkitXBPLibrary_GetFileSize final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileToolkitXBPLibrary_GetFileSize) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_GetFileSize");
static_assert(sizeof(FileToolkitXBPLibrary_GetFileSize) == 0x000018, "Wrong size on FileToolkitXBPLibrary_GetFileSize");
static_assert(offsetof(FileToolkitXBPLibrary_GetFileSize, FilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_GetFileSize::FilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_GetFileSize, ReturnValue) == 0x000010, "Member 'FileToolkitXBPLibrary_GetFileSize::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.IsFileReadOnly
// 0x0018 (0x0018 - 0x0000)
struct FileToolkitXBPLibrary_IsFileReadOnly final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_IsFileReadOnly) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_IsFileReadOnly");
static_assert(sizeof(FileToolkitXBPLibrary_IsFileReadOnly) == 0x000018, "Wrong size on FileToolkitXBPLibrary_IsFileReadOnly");
static_assert(offsetof(FileToolkitXBPLibrary_IsFileReadOnly, FilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_IsFileReadOnly::FilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_IsFileReadOnly, ReturnValue) == 0x000010, "Member 'FileToolkitXBPLibrary_IsFileReadOnly::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.IsFolderEmpty
// 0x0018 (0x0018 - 0x0000)
struct FileToolkitXBPLibrary_IsFolderEmpty final
{
public:
	class FString                                 FolderPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_IsFolderEmpty) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_IsFolderEmpty");
static_assert(sizeof(FileToolkitXBPLibrary_IsFolderEmpty) == 0x000018, "Wrong size on FileToolkitXBPLibrary_IsFolderEmpty");
static_assert(offsetof(FileToolkitXBPLibrary_IsFolderEmpty, FolderPath) == 0x000000, "Member 'FileToolkitXBPLibrary_IsFolderEmpty::FolderPath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_IsFolderEmpty, ReturnValue) == 0x000010, "Member 'FileToolkitXBPLibrary_IsFolderEmpty::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.MoveFile
// 0x0028 (0x0028 - 0x0000)
struct FileToolkitXBPLibrary_MoveFile final
{
public:
	class FString                                 SourceFilePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestFilePath;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_MoveFile) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_MoveFile");
static_assert(sizeof(FileToolkitXBPLibrary_MoveFile) == 0x000028, "Wrong size on FileToolkitXBPLibrary_MoveFile");
static_assert(offsetof(FileToolkitXBPLibrary_MoveFile, SourceFilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_MoveFile::SourceFilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_MoveFile, DestFilePath) == 0x000010, "Member 'FileToolkitXBPLibrary_MoveFile::DestFilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_MoveFile, ReturnValue) == 0x000020, "Member 'FileToolkitXBPLibrary_MoveFile::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.PrintMapContents
// 0x0068 (0x0068 - 0x0000)
struct FileToolkitXBPLibrary_PrintMapContents final
{
public:
	TMap<class FString, class FString>            MapToPrint;                                        // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0050(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_PrintMapContents) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_PrintMapContents");
static_assert(sizeof(FileToolkitXBPLibrary_PrintMapContents) == 0x000068, "Wrong size on FileToolkitXBPLibrary_PrintMapContents");
static_assert(offsetof(FileToolkitXBPLibrary_PrintMapContents, MapToPrint) == 0x000000, "Member 'FileToolkitXBPLibrary_PrintMapContents::MapToPrint' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_PrintMapContents, TextColor) == 0x000050, "Member 'FileToolkitXBPLibrary_PrintMapContents::TextColor' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_PrintMapContents, DisplayTime) == 0x000060, "Member 'FileToolkitXBPLibrary_PrintMapContents::DisplayTime' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.ReadFileContent
// 0x0020 (0x0020 - 0x0000)
struct FileToolkitXBPLibrary_ReadFileContent final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FileToolkitXBPLibrary_ReadFileContent) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_ReadFileContent");
static_assert(sizeof(FileToolkitXBPLibrary_ReadFileContent) == 0x000020, "Wrong size on FileToolkitXBPLibrary_ReadFileContent");
static_assert(offsetof(FileToolkitXBPLibrary_ReadFileContent, FilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_ReadFileContent::FilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_ReadFileContent, ReturnValue) == 0x000010, "Member 'FileToolkitXBPLibrary_ReadFileContent::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.RunExeFile
// 0x0018 (0x0018 - 0x0000)
struct FileToolkitXBPLibrary_RunExeFile final
{
public:
	class FString                                 FilePath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_RunExeFile) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_RunExeFile");
static_assert(sizeof(FileToolkitXBPLibrary_RunExeFile) == 0x000018, "Wrong size on FileToolkitXBPLibrary_RunExeFile");
static_assert(offsetof(FileToolkitXBPLibrary_RunExeFile, FilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_RunExeFile::FilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_RunExeFile, ReturnValue) == 0x000010, "Member 'FileToolkitXBPLibrary_RunExeFile::ReturnValue' has a wrong offset!");

// Function FileToolkitX.FileToolkitXBPLibrary.RunFileWithOptions
// 0x0028 (0x0028 - 0x0000)
struct FileToolkitXBPLibrary_RunFileWithOptions final
{
public:
	class FString                                 InFilePath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InArguments;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InWithAdminRights;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FileToolkitXBPLibrary_RunFileWithOptions) == 0x000008, "Wrong alignment on FileToolkitXBPLibrary_RunFileWithOptions");
static_assert(sizeof(FileToolkitXBPLibrary_RunFileWithOptions) == 0x000028, "Wrong size on FileToolkitXBPLibrary_RunFileWithOptions");
static_assert(offsetof(FileToolkitXBPLibrary_RunFileWithOptions, InFilePath) == 0x000000, "Member 'FileToolkitXBPLibrary_RunFileWithOptions::InFilePath' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_RunFileWithOptions, InArguments) == 0x000010, "Member 'FileToolkitXBPLibrary_RunFileWithOptions::InArguments' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_RunFileWithOptions, InWithAdminRights) == 0x000020, "Member 'FileToolkitXBPLibrary_RunFileWithOptions::InWithAdminRights' has a wrong offset!");
static_assert(offsetof(FileToolkitXBPLibrary_RunFileWithOptions, ReturnValue) == 0x000021, "Member 'FileToolkitXBPLibrary_RunFileWithOptions::ReturnValue' has a wrong offset!");

// Function FileToolkitX.RunFileWithOptionsAsyncAction.RunFileWithOptionsAsync
// 0x0030 (0x0030 - 0x0000)
struct RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync final
{
public:
	class FString                                 InFilePath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InArguments;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InWithAdminRights;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URunFileWithOptionsAsyncAction*         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync) == 0x000008, "Wrong alignment on RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync");
static_assert(sizeof(RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync) == 0x000030, "Wrong size on RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync");
static_assert(offsetof(RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync, InFilePath) == 0x000000, "Member 'RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync::InFilePath' has a wrong offset!");
static_assert(offsetof(RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync, InArguments) == 0x000010, "Member 'RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync::InArguments' has a wrong offset!");
static_assert(offsetof(RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync, InWithAdminRights) == 0x000020, "Member 'RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync::InWithAdminRights' has a wrong offset!");
static_assert(offsetof(RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync, ReturnValue) == 0x000028, "Member 'RunFileWithOptionsAsyncAction_RunFileWithOptionsAsync::ReturnValue' has a wrong offset!");

}

