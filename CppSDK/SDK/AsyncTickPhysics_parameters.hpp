#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AsyncTickPhysics

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AsyncTickPhysics.AsyncTickActorComponent.AsyncTick
// 0x0004 (0x0004 - 0x0000)
struct AsyncTickActorComponent_AsyncTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickActorComponent_AsyncTick) == 0x000004, "Wrong alignment on AsyncTickActorComponent_AsyncTick");
static_assert(sizeof(AsyncTickActorComponent_AsyncTick) == 0x000004, "Wrong size on AsyncTickActorComponent_AsyncTick");
static_assert(offsetof(AsyncTickActorComponent_AsyncTick, DeltaTime) == 0x000000, "Member 'AsyncTickActorComponent_AsyncTick::DeltaTime' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_AddAngularImpulseInDegrees
// 0x0030 (0x0030 - 0x0000)
struct AsyncTickFunctions_ATP_AddAngularImpulseInDegrees final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Torque;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelChange;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AsyncTickFunctions_ATP_AddAngularImpulseInDegrees) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_AddAngularImpulseInDegrees");
static_assert(sizeof(AsyncTickFunctions_ATP_AddAngularImpulseInDegrees) == 0x000030, "Wrong size on AsyncTickFunctions_ATP_AddAngularImpulseInDegrees");
static_assert(offsetof(AsyncTickFunctions_ATP_AddAngularImpulseInDegrees, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_AddAngularImpulseInDegrees::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddAngularImpulseInDegrees, Torque) == 0x000008, "Member 'AsyncTickFunctions_ATP_AddAngularImpulseInDegrees::Torque' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddAngularImpulseInDegrees, bVelChange) == 0x000020, "Member 'AsyncTickFunctions_ATP_AddAngularImpulseInDegrees::bVelChange' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddAngularImpulseInDegrees, BoneName) == 0x000024, "Member 'AsyncTickFunctions_ATP_AddAngularImpulseInDegrees::BoneName' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_AddAngularImpulseInRadians
// 0x0030 (0x0030 - 0x0000)
struct AsyncTickFunctions_ATP_AddAngularImpulseInRadians final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Torque;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelChange;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AsyncTickFunctions_ATP_AddAngularImpulseInRadians) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_AddAngularImpulseInRadians");
static_assert(sizeof(AsyncTickFunctions_ATP_AddAngularImpulseInRadians) == 0x000030, "Wrong size on AsyncTickFunctions_ATP_AddAngularImpulseInRadians");
static_assert(offsetof(AsyncTickFunctions_ATP_AddAngularImpulseInRadians, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_AddAngularImpulseInRadians::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddAngularImpulseInRadians, Torque) == 0x000008, "Member 'AsyncTickFunctions_ATP_AddAngularImpulseInRadians::Torque' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddAngularImpulseInRadians, bVelChange) == 0x000020, "Member 'AsyncTickFunctions_ATP_AddAngularImpulseInRadians::bVelChange' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddAngularImpulseInRadians, BoneName) == 0x000024, "Member 'AsyncTickFunctions_ATP_AddAngularImpulseInRadians::BoneName' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_AddForce
// 0x0030 (0x0030 - 0x0000)
struct AsyncTickFunctions_ATP_AddForce final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Force;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccelChange;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AsyncTickFunctions_ATP_AddForce) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_AddForce");
static_assert(sizeof(AsyncTickFunctions_ATP_AddForce) == 0x000030, "Wrong size on AsyncTickFunctions_ATP_AddForce");
static_assert(offsetof(AsyncTickFunctions_ATP_AddForce, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_AddForce::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddForce, Force) == 0x000008, "Member 'AsyncTickFunctions_ATP_AddForce::Force' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddForce, bAccelChange) == 0x000020, "Member 'AsyncTickFunctions_ATP_AddForce::bAccelChange' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddForce, BoneName) == 0x000024, "Member 'AsyncTickFunctions_ATP_AddForce::BoneName' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_AddForceAtPosition
// 0x0040 (0x0040 - 0x0000)
struct AsyncTickFunctions_ATP_AddForceAtPosition final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Force;                                             // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickFunctions_ATP_AddForceAtPosition) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_AddForceAtPosition");
static_assert(sizeof(AsyncTickFunctions_ATP_AddForceAtPosition) == 0x000040, "Wrong size on AsyncTickFunctions_ATP_AddForceAtPosition");
static_assert(offsetof(AsyncTickFunctions_ATP_AddForceAtPosition, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_AddForceAtPosition::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddForceAtPosition, position) == 0x000008, "Member 'AsyncTickFunctions_ATP_AddForceAtPosition::position' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddForceAtPosition, Force) == 0x000020, "Member 'AsyncTickFunctions_ATP_AddForceAtPosition::Force' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddForceAtPosition, BoneName) == 0x000038, "Member 'AsyncTickFunctions_ATP_AddForceAtPosition::BoneName' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_AddImpulse
// 0x0030 (0x0030 - 0x0000)
struct AsyncTickFunctions_ATP_AddImpulse final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Impulse;                                           // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelChange;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AsyncTickFunctions_ATP_AddImpulse) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_AddImpulse");
static_assert(sizeof(AsyncTickFunctions_ATP_AddImpulse) == 0x000030, "Wrong size on AsyncTickFunctions_ATP_AddImpulse");
static_assert(offsetof(AsyncTickFunctions_ATP_AddImpulse, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_AddImpulse::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddImpulse, Impulse) == 0x000008, "Member 'AsyncTickFunctions_ATP_AddImpulse::Impulse' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddImpulse, bVelChange) == 0x000020, "Member 'AsyncTickFunctions_ATP_AddImpulse::bVelChange' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddImpulse, BoneName) == 0x000024, "Member 'AsyncTickFunctions_ATP_AddImpulse::BoneName' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_AddImpulseAtPosition
// 0x0040 (0x0040 - 0x0000)
struct AsyncTickFunctions_ATP_AddImpulseAtPosition final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                position;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Impulse;                                           // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickFunctions_ATP_AddImpulseAtPosition) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_AddImpulseAtPosition");
static_assert(sizeof(AsyncTickFunctions_ATP_AddImpulseAtPosition) == 0x000040, "Wrong size on AsyncTickFunctions_ATP_AddImpulseAtPosition");
static_assert(offsetof(AsyncTickFunctions_ATP_AddImpulseAtPosition, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_AddImpulseAtPosition::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddImpulseAtPosition, position) == 0x000008, "Member 'AsyncTickFunctions_ATP_AddImpulseAtPosition::position' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddImpulseAtPosition, Impulse) == 0x000020, "Member 'AsyncTickFunctions_ATP_AddImpulseAtPosition::Impulse' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddImpulseAtPosition, BoneName) == 0x000038, "Member 'AsyncTickFunctions_ATP_AddImpulseAtPosition::BoneName' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_AddTorque
// 0x0030 (0x0030 - 0x0000)
struct AsyncTickFunctions_ATP_AddTorque final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Torque;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccelChange;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AsyncTickFunctions_ATP_AddTorque) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_AddTorque");
static_assert(sizeof(AsyncTickFunctions_ATP_AddTorque) == 0x000030, "Wrong size on AsyncTickFunctions_ATP_AddTorque");
static_assert(offsetof(AsyncTickFunctions_ATP_AddTorque, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_AddTorque::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddTorque, Torque) == 0x000008, "Member 'AsyncTickFunctions_ATP_AddTorque::Torque' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddTorque, bAccelChange) == 0x000020, "Member 'AsyncTickFunctions_ATP_AddTorque::bAccelChange' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_AddTorque, BoneName) == 0x000024, "Member 'AsyncTickFunctions_ATP_AddTorque::BoneName' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_GetAngularVelocity
// 0x0028 (0x0028 - 0x0000)
struct AsyncTickFunctions_ATP_GetAngularVelocity final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickFunctions_ATP_GetAngularVelocity) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_GetAngularVelocity");
static_assert(sizeof(AsyncTickFunctions_ATP_GetAngularVelocity) == 0x000028, "Wrong size on AsyncTickFunctions_ATP_GetAngularVelocity");
static_assert(offsetof(AsyncTickFunctions_ATP_GetAngularVelocity, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_GetAngularVelocity::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_GetAngularVelocity, BoneName) == 0x000008, "Member 'AsyncTickFunctions_ATP_GetAngularVelocity::BoneName' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_GetAngularVelocity, ReturnValue) == 0x000010, "Member 'AsyncTickFunctions_ATP_GetAngularVelocity::ReturnValue' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_GetCoMPosition
// 0x0020 (0x0020 - 0x0000)
struct AsyncTickFunctions_ATP_GetCoMPosition final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickFunctions_ATP_GetCoMPosition) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_GetCoMPosition");
static_assert(sizeof(AsyncTickFunctions_ATP_GetCoMPosition) == 0x000020, "Wrong size on AsyncTickFunctions_ATP_GetCoMPosition");
static_assert(offsetof(AsyncTickFunctions_ATP_GetCoMPosition, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_GetCoMPosition::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_GetCoMPosition, ReturnValue) == 0x000008, "Member 'AsyncTickFunctions_ATP_GetCoMPosition::ReturnValue' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_GetLinearVelocity
// 0x0028 (0x0028 - 0x0000)
struct AsyncTickFunctions_ATP_GetLinearVelocity final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickFunctions_ATP_GetLinearVelocity) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_GetLinearVelocity");
static_assert(sizeof(AsyncTickFunctions_ATP_GetLinearVelocity) == 0x000028, "Wrong size on AsyncTickFunctions_ATP_GetLinearVelocity");
static_assert(offsetof(AsyncTickFunctions_ATP_GetLinearVelocity, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_GetLinearVelocity::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_GetLinearVelocity, BoneName) == 0x000008, "Member 'AsyncTickFunctions_ATP_GetLinearVelocity::BoneName' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_GetLinearVelocity, ReturnValue) == 0x000010, "Member 'AsyncTickFunctions_ATP_GetLinearVelocity::ReturnValue' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_GetLinearVelocityAtPoint
// 0x0040 (0x0040 - 0x0000)
struct AsyncTickFunctions_ATP_GetLinearVelocityAtPoint final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickFunctions_ATP_GetLinearVelocityAtPoint) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_GetLinearVelocityAtPoint");
static_assert(sizeof(AsyncTickFunctions_ATP_GetLinearVelocityAtPoint) == 0x000040, "Wrong size on AsyncTickFunctions_ATP_GetLinearVelocityAtPoint");
static_assert(offsetof(AsyncTickFunctions_ATP_GetLinearVelocityAtPoint, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_GetLinearVelocityAtPoint::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_GetLinearVelocityAtPoint, Point) == 0x000008, "Member 'AsyncTickFunctions_ATP_GetLinearVelocityAtPoint::Point' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_GetLinearVelocityAtPoint, BoneName) == 0x000020, "Member 'AsyncTickFunctions_ATP_GetLinearVelocityAtPoint::BoneName' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_GetLinearVelocityAtPoint, ReturnValue) == 0x000028, "Member 'AsyncTickFunctions_ATP_GetLinearVelocityAtPoint::ReturnValue' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_GetTransform
// 0x0070 (0x0070 - 0x0000)
struct AsyncTickFunctions_ATP_GetTransform final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickFunctions_ATP_GetTransform) == 0x000010, "Wrong alignment on AsyncTickFunctions_ATP_GetTransform");
static_assert(sizeof(AsyncTickFunctions_ATP_GetTransform) == 0x000070, "Wrong size on AsyncTickFunctions_ATP_GetTransform");
static_assert(offsetof(AsyncTickFunctions_ATP_GetTransform, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_GetTransform::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_GetTransform, ReturnValue) == 0x000010, "Member 'AsyncTickFunctions_ATP_GetTransform::ReturnValue' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_SetAngularVelocityInDegrees
// 0x0030 (0x0030 - 0x0000)
struct AsyncTickFunctions_ATP_SetAngularVelocityInDegrees final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngVelocity;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToCurrent;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AsyncTickFunctions_ATP_SetAngularVelocityInDegrees) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_SetAngularVelocityInDegrees");
static_assert(sizeof(AsyncTickFunctions_ATP_SetAngularVelocityInDegrees) == 0x000030, "Wrong size on AsyncTickFunctions_ATP_SetAngularVelocityInDegrees");
static_assert(offsetof(AsyncTickFunctions_ATP_SetAngularVelocityInDegrees, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_SetAngularVelocityInDegrees::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetAngularVelocityInDegrees, AngVelocity) == 0x000008, "Member 'AsyncTickFunctions_ATP_SetAngularVelocityInDegrees::AngVelocity' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetAngularVelocityInDegrees, bAddToCurrent) == 0x000020, "Member 'AsyncTickFunctions_ATP_SetAngularVelocityInDegrees::bAddToCurrent' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetAngularVelocityInDegrees, BoneName) == 0x000024, "Member 'AsyncTickFunctions_ATP_SetAngularVelocityInDegrees::BoneName' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_SetAngularVelocityInRadians
// 0x0030 (0x0030 - 0x0000)
struct AsyncTickFunctions_ATP_SetAngularVelocityInRadians final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngVelocity;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToCurrent;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AsyncTickFunctions_ATP_SetAngularVelocityInRadians) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_SetAngularVelocityInRadians");
static_assert(sizeof(AsyncTickFunctions_ATP_SetAngularVelocityInRadians) == 0x000030, "Wrong size on AsyncTickFunctions_ATP_SetAngularVelocityInRadians");
static_assert(offsetof(AsyncTickFunctions_ATP_SetAngularVelocityInRadians, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_SetAngularVelocityInRadians::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetAngularVelocityInRadians, AngVelocity) == 0x000008, "Member 'AsyncTickFunctions_ATP_SetAngularVelocityInRadians::AngVelocity' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetAngularVelocityInRadians, bAddToCurrent) == 0x000020, "Member 'AsyncTickFunctions_ATP_SetAngularVelocityInRadians::bAddToCurrent' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetAngularVelocityInRadians, BoneName) == 0x000024, "Member 'AsyncTickFunctions_ATP_SetAngularVelocityInRadians::BoneName' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_SetLinearVelocity
// 0x0030 (0x0030 - 0x0000)
struct AsyncTickFunctions_ATP_SetLinearVelocity final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToCurrent;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AsyncTickFunctions_ATP_SetLinearVelocity) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_SetLinearVelocity");
static_assert(sizeof(AsyncTickFunctions_ATP_SetLinearVelocity) == 0x000030, "Wrong size on AsyncTickFunctions_ATP_SetLinearVelocity");
static_assert(offsetof(AsyncTickFunctions_ATP_SetLinearVelocity, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_SetLinearVelocity::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetLinearVelocity, Velocity) == 0x000008, "Member 'AsyncTickFunctions_ATP_SetLinearVelocity::Velocity' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetLinearVelocity, bAddToCurrent) == 0x000020, "Member 'AsyncTickFunctions_ATP_SetLinearVelocity::bAddToCurrent' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetLinearVelocity, BoneName) == 0x000024, "Member 'AsyncTickFunctions_ATP_SetLinearVelocity::BoneName' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_SetWorldLocation
// 0x0020 (0x0020 - 0x0000)
struct AsyncTickFunctions_ATP_SetWorldLocation final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickFunctions_ATP_SetWorldLocation) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_SetWorldLocation");
static_assert(sizeof(AsyncTickFunctions_ATP_SetWorldLocation) == 0x000020, "Wrong size on AsyncTickFunctions_ATP_SetWorldLocation");
static_assert(offsetof(AsyncTickFunctions_ATP_SetWorldLocation, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_SetWorldLocation::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetWorldLocation, Location) == 0x000008, "Member 'AsyncTickFunctions_ATP_SetWorldLocation::Location' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_SetWorldLocationAndRotation
// 0x0038 (0x0038 - 0x0000)
struct AsyncTickFunctions_ATP_SetWorldLocationAndRotation final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickFunctions_ATP_SetWorldLocationAndRotation) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_SetWorldLocationAndRotation");
static_assert(sizeof(AsyncTickFunctions_ATP_SetWorldLocationAndRotation) == 0x000038, "Wrong size on AsyncTickFunctions_ATP_SetWorldLocationAndRotation");
static_assert(offsetof(AsyncTickFunctions_ATP_SetWorldLocationAndRotation, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_SetWorldLocationAndRotation::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetWorldLocationAndRotation, Location) == 0x000008, "Member 'AsyncTickFunctions_ATP_SetWorldLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetWorldLocationAndRotation, Rotation) == 0x000020, "Member 'AsyncTickFunctions_ATP_SetWorldLocationAndRotation::Rotation' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickFunctions.ATP_SetWorldRotation
// 0x0020 (0x0020 - 0x0000)
struct AsyncTickFunctions_ATP_SetWorldRotation final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickFunctions_ATP_SetWorldRotation) == 0x000008, "Wrong alignment on AsyncTickFunctions_ATP_SetWorldRotation");
static_assert(sizeof(AsyncTickFunctions_ATP_SetWorldRotation) == 0x000020, "Wrong size on AsyncTickFunctions_ATP_SetWorldRotation");
static_assert(offsetof(AsyncTickFunctions_ATP_SetWorldRotation, Component) == 0x000000, "Member 'AsyncTickFunctions_ATP_SetWorldRotation::Component' has a wrong offset!");
static_assert(offsetof(AsyncTickFunctions_ATP_SetWorldRotation, Rotation) == 0x000008, "Member 'AsyncTickFunctions_ATP_SetWorldRotation::Rotation' has a wrong offset!");

// Function AsyncTickPhysics.AsyncTickPawn.AsyncTick
// 0x0004 (0x0004 - 0x0000)
struct AsyncTickPawn_AsyncTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncTickPawn_AsyncTick) == 0x000004, "Wrong alignment on AsyncTickPawn_AsyncTick");
static_assert(sizeof(AsyncTickPawn_AsyncTick) == 0x000004, "Wrong size on AsyncTickPawn_AsyncTick");
static_assert(offsetof(AsyncTickPawn_AsyncTick, DeltaTime) == 0x000000, "Member 'AsyncTickPawn_AsyncTick::DeltaTime' has a wrong offset!");

}

