#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MachinePannel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MachinePannel.MachinePannel_C
// 0x00D8 (0x0380 - 0x02A8)
class AMachinePannel_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   C_SoundPath;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Light;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   C_Button_Top;                                      // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   C_Button_Bot;                                      // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AButton_C*                              Button_Top;                                        // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AButton_C*                              Button_Bot;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Pressure_Target;                                   // 0x02F8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Smooth_Pressure;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_MachinePannelScreen_C*               Screen;                                            // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Pressure;                                          // 0x0310(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Pressure_Change;                                   // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	uint8                                         Lock;                                              // 0x0328(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABottleSlot_C*>                  Bottles;                                           // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	struct FTimerHandle                           Timer;                                             // 0x0340(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASoundSource_C*                         Sound;                                             // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           SoundCurve;                                        // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch_Offset;                                      // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASoundPath_C*                           Sound_Patch;                                       // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Belt;                                              // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Belt_Anim;                                         // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Exploded;                                          // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void All_Bip();
	void All_Explosion_Bip();
	void BndEvt__MachinePannel_Button_Bot_K2Node_ComponentBoundEvent_1_Button_Push__DelegateSignature(class AMec_C* Source);
	void BndEvt__MachinePannel_Button_Top_K2Node_ComponentBoundEvent_0_Button_Push__DelegateSignature(class AMec_C* Source);
	void Bottle_Change();
	void Bottles_Check(bool* Full);
	void Clear_Machine();
	void ExecuteUbergraph_MachinePannel(int32 EntryPoint);
	void Explosion();
	void Finished_Machine();
	void OnRep_Lock();
	void OnRep_Pressure();
	void OnRep_Pressure_Target();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Set_Light_Color();
	void Start_Machine();
	void Start_Timer();
	void Stop_Timer();
	void Timer_Tick();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MachinePannel_C">();
	}
	static class AMachinePannel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMachinePannel_C>();
	}
};
static_assert(alignof(AMachinePannel_C) == 0x000008, "Wrong alignment on AMachinePannel_C");
static_assert(sizeof(AMachinePannel_C) == 0x000380, "Wrong size on AMachinePannel_C");
static_assert(offsetof(AMachinePannel_C, UberGraphFrame) == 0x0002A8, "Member 'AMachinePannel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Audio) == 0x0002B0, "Member 'AMachinePannel_C::Audio' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, C_SoundPath) == 0x0002B8, "Member 'AMachinePannel_C::C_SoundPath' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Light) == 0x0002C0, "Member 'AMachinePannel_C::Light' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, C_Button_Top) == 0x0002C8, "Member 'AMachinePannel_C::C_Button_Top' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, C_Button_Bot) == 0x0002D0, "Member 'AMachinePannel_C::C_Button_Bot' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Widget) == 0x0002D8, "Member 'AMachinePannel_C::Widget' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, DefaultSceneRoot) == 0x0002E0, "Member 'AMachinePannel_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Button_Top) == 0x0002E8, "Member 'AMachinePannel_C::Button_Top' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Button_Bot) == 0x0002F0, "Member 'AMachinePannel_C::Button_Bot' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Pressure_Target) == 0x0002F8, "Member 'AMachinePannel_C::Pressure_Target' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Smooth_Pressure) == 0x000300, "Member 'AMachinePannel_C::Smooth_Pressure' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Screen) == 0x000308, "Member 'AMachinePannel_C::Screen' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Pressure) == 0x000310, "Member 'AMachinePannel_C::Pressure' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Pressure_Change) == 0x000318, "Member 'AMachinePannel_C::Pressure_Change' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Lock) == 0x000328, "Member 'AMachinePannel_C::Lock' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Bottles) == 0x000330, "Member 'AMachinePannel_C::Bottles' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Timer) == 0x000340, "Member 'AMachinePannel_C::Timer' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Sound) == 0x000348, "Member 'AMachinePannel_C::Sound' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, SoundCurve) == 0x000350, "Member 'AMachinePannel_C::SoundCurve' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Pitch_Offset) == 0x000358, "Member 'AMachinePannel_C::Pitch_Offset' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Sound_Patch) == 0x000360, "Member 'AMachinePannel_C::Sound_Patch' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Belt) == 0x000368, "Member 'AMachinePannel_C::Belt' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Belt_Anim) == 0x000370, "Member 'AMachinePannel_C::Belt_Anim' has a wrong offset!");
static_assert(offsetof(AMachinePannel_C, Exploded) == 0x000378, "Member 'AMachinePannel_C::Exploded' has a wrong offset!");

}

