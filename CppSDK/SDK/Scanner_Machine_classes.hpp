#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Scanner_Machine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Scanner_Machine.Scanner_Machine_C
// 0x0060 (0x0308 - 0x02A8)
class AScanner_Machine_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AMec_C*>                         Mecs;                                              // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           Timer;                                             // 0x02C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Scan_Rotation;                                     // 0x02D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TMulticastInlineDelegate<void(const struct FRotator& Rotation)> Update_Rotation;                 // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Finish;                                            // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Clear();
	void ExecuteUbergraph_Scanner_Machine(int32 EntryPoint);
	void Finish_Scan();
	void Nearest_Mec(double Max_Distance, class AMec_C** Mec);
	void ReceiveBeginPlay();
	void Scanner_Tick();
	void Start_Scanner();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Scanner_Machine_C">();
	}
	static class AScanner_Machine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AScanner_Machine_C>();
	}
};
static_assert(alignof(AScanner_Machine_C) == 0x000008, "Wrong alignment on AScanner_Machine_C");
static_assert(sizeof(AScanner_Machine_C) == 0x000308, "Wrong size on AScanner_Machine_C");
static_assert(offsetof(AScanner_Machine_C, UberGraphFrame) == 0x0002A8, "Member 'AScanner_Machine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AScanner_Machine_C, DefaultSceneRoot) == 0x0002B0, "Member 'AScanner_Machine_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AScanner_Machine_C, Mecs) == 0x0002B8, "Member 'AScanner_Machine_C::Mecs' has a wrong offset!");
static_assert(offsetof(AScanner_Machine_C, Timer) == 0x0002C8, "Member 'AScanner_Machine_C::Timer' has a wrong offset!");
static_assert(offsetof(AScanner_Machine_C, Scan_Rotation) == 0x0002D0, "Member 'AScanner_Machine_C::Scan_Rotation' has a wrong offset!");
static_assert(offsetof(AScanner_Machine_C, Update_Rotation) == 0x0002E8, "Member 'AScanner_Machine_C::Update_Rotation' has a wrong offset!");
static_assert(offsetof(AScanner_Machine_C, Finish) == 0x0002F8, "Member 'AScanner_Machine_C::Finish' has a wrong offset!");

}

