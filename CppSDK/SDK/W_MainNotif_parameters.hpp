#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MainNotif

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function W_MainNotif.W_MainNotif_C.ExecuteUbergraph_W_MainNotif
// 0x0080 (0x0080 - 0x0000)
struct W_MainNotif_C_ExecuteUbergraph_W_MainNotif final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_Message;                        // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_Color;                          // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0070(0x0010)()
};
static_assert(alignof(W_MainNotif_C_ExecuteUbergraph_W_MainNotif) == 0x000008, "Wrong alignment on W_MainNotif_C_ExecuteUbergraph_W_MainNotif");
static_assert(sizeof(W_MainNotif_C_ExecuteUbergraph_W_MainNotif) == 0x000080, "Wrong size on W_MainNotif_C_ExecuteUbergraph_W_MainNotif");
static_assert(offsetof(W_MainNotif_C_ExecuteUbergraph_W_MainNotif, EntryPoint) == 0x000000, "Member 'W_MainNotif_C_ExecuteUbergraph_W_MainNotif::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_MainNotif_C_ExecuteUbergraph_W_MainNotif, K2Node_Event_MyGeometry) == 0x000004, "Member 'W_MainNotif_C_ExecuteUbergraph_W_MainNotif::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_MainNotif_C_ExecuteUbergraph_W_MainNotif, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'W_MainNotif_C_ExecuteUbergraph_W_MainNotif::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_MainNotif_C_ExecuteUbergraph_W_MainNotif, K2Node_Event_IsDesignTime) == 0x000040, "Member 'W_MainNotif_C_ExecuteUbergraph_W_MainNotif::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_MainNotif_C_ExecuteUbergraph_W_MainNotif, K2Node_CustomEvent_Message) == 0x000048, "Member 'W_MainNotif_C_ExecuteUbergraph_W_MainNotif::K2Node_CustomEvent_Message' has a wrong offset!");
static_assert(offsetof(W_MainNotif_C_ExecuteUbergraph_W_MainNotif, K2Node_CustomEvent_Color) == 0x000058, "Member 'W_MainNotif_C_ExecuteUbergraph_W_MainNotif::K2Node_CustomEvent_Color' has a wrong offset!");
static_assert(offsetof(W_MainNotif_C_ExecuteUbergraph_W_MainNotif, CallFunc_PlayAnimation_ReturnValue) == 0x000068, "Member 'W_MainNotif_C_ExecuteUbergraph_W_MainNotif::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MainNotif_C_ExecuteUbergraph_W_MainNotif, CallFunc_Conv_StringToText_ReturnValue) == 0x000070, "Member 'W_MainNotif_C_ExecuteUbergraph_W_MainNotif::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function W_MainNotif.W_MainNotif_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_MainNotif_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MainNotif_C_PreConstruct) == 0x000001, "Wrong alignment on W_MainNotif_C_PreConstruct");
static_assert(sizeof(W_MainNotif_C_PreConstruct) == 0x000001, "Wrong size on W_MainNotif_C_PreConstruct");
static_assert(offsetof(W_MainNotif_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_MainNotif_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_MainNotif.W_MainNotif_C.Show Message
// 0x0020 (0x0020 - 0x0000)
struct W_MainNotif_C_Show_Message final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MainNotif_C_Show_Message) == 0x000008, "Wrong alignment on W_MainNotif_C_Show_Message");
static_assert(sizeof(W_MainNotif_C_Show_Message) == 0x000020, "Wrong size on W_MainNotif_C_Show_Message");
static_assert(offsetof(W_MainNotif_C_Show_Message, Message) == 0x000000, "Member 'W_MainNotif_C_Show_Message::Message' has a wrong offset!");
static_assert(offsetof(W_MainNotif_C_Show_Message, Color) == 0x000010, "Member 'W_MainNotif_C_Show_Message::Color' has a wrong offset!");

// Function W_MainNotif.W_MainNotif_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_MainNotif_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MainNotif_C_Tick) == 0x000004, "Wrong alignment on W_MainNotif_C_Tick");
static_assert(sizeof(W_MainNotif_C_Tick) == 0x00003C, "Wrong size on W_MainNotif_C_Tick");
static_assert(offsetof(W_MainNotif_C_Tick, MyGeometry) == 0x000000, "Member 'W_MainNotif_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_MainNotif_C_Tick, InDeltaTime) == 0x000038, "Member 'W_MainNotif_C_Tick::InDeltaTime' has a wrong offset!");

}

