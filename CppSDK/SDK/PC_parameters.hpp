#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PC

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "GraphicSettings_structs.hpp"


namespace SDK::Params
{

// Function PC.PC_C.ExecuteUbergraph_PC
// 0x02E0 (0x02E0 - 0x0000)
struct PC_C_ExecuteUbergraph_PC final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Temp_byte_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGraphicSettings                       K2Node_MakeStruct_GraphicSettings;                 // 0x0024(0x0028)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGM_C*                                  K2Node_DynamicCast_AsGM;                           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Fog_Quality_ReturnValue;              // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_PossessedPawn;                        // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AMec_C*                                 K2Node_DynamicCast_AsMec;                          // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bWasSuccessful;                 // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_LocalPlayerNum;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_InvitedBy;                      // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FBlueprintSessionResult                K2Node_CustomEvent_Session;                        // 0x0098(0x0120)(ConstParm)
	bool                                          CallFunc_DoesSaveGameExist_ReturnValue;            // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SaveGameToSlot_ReturnValue;               // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_True_1;                         // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_True;                           // 0x01BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bWasSuccessful, int32 LocalPlayerNum, const class FString& InvitedBy, const struct FBlueprintSessionResult& Session)> K2Node_CreateDelegate_OutputDelegate_1; // 0x01BC(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGraphicSettings                       K2Node_MakeStruct_GraphicSettings_1;               // 0x01CC(0x0028)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMainGI_C*                              K2Node_DynamicCast_AsMain_GI;                      // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Client_Only;                    // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20A[0x6];                                      // 0x020A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMainGI_C*                              K2Node_DynamicCast_AsMain_GI_1;                    // 0x0218(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x3];                                      // 0x0221(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Fog_Quality_ReturnValue_1;            // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0228(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0238(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetCurrentCulture_ReturnValue;            // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26A[0x2];                                      // 0x026A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntPoint>                      CallFunc_GetSupportedFullscreenResolutions_Resolutions; // 0x0278(0x0010)(ReferenceParm)
	bool                                          CallFunc_GetSupportedFullscreenResolutions_ReturnValue; // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Array_Get_Item;                           // 0x0294(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFramePace_ReturnValue;                 // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x02A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SaveGameToSlot_ReturnValue_1;             // 0x02A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A3[0x5];                                      // 0x02A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USave_Settings_C*                       CallFunc_CreateSaveGameObject_ReturnValue;         // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x02B0(0x0018)(HasGetValueTypeHash)
	class USaveGame*                              CallFunc_LoadGameFromSlot_ReturnValue;             // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USave_Settings_C*                       K2Node_DynamicCast_AsSave_Settings;                // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_ExecuteUbergraph_PC) == 0x000008, "Wrong alignment on PC_C_ExecuteUbergraph_PC");
static_assert(sizeof(PC_C_ExecuteUbergraph_PC) == 0x0002E0, "Wrong size on PC_C_ExecuteUbergraph_PC");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, EntryPoint) == 0x000000, "Member 'PC_C_ExecuteUbergraph_PC::EntryPoint' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_HasAuthority_ReturnValue) == 0x000020, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, Temp_byte_Variable) == 0x000021, "Member 'PC_C_ExecuteUbergraph_PC::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_MakeStruct_GraphicSettings) == 0x000024, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_MakeStruct_GraphicSettings' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_GetGameMode_ReturnValue) == 0x000050, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_DynamicCast_AsGM) == 0x000058, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_DynamicCast_AsGM' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_Get_Fog_Quality_ReturnValue) == 0x000064, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_Get_Fog_Quality_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_GetPlayerPawn_ReturnValue) == 0x000068, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_Event_PossessedPawn) == 0x000070, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_Event_PossessedPawn' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_DynamicCast_AsMec) == 0x000078, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_DynamicCast_AsMec' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_CustomEvent_bWasSuccessful) == 0x000081, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_CustomEvent_bWasSuccessful' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_CustomEvent_LocalPlayerNum) == 0x000084, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_CustomEvent_LocalPlayerNum' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_CustomEvent_InvitedBy) == 0x000088, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_CustomEvent_InvitedBy' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_CustomEvent_Session) == 0x000098, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_CustomEvent_Session' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_DoesSaveGameExist_ReturnValue) == 0x0001B8, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_DoesSaveGameExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_SaveGameToSlot_ReturnValue) == 0x0001B9, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_SaveGameToSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_CustomEvent_True_1) == 0x0001BA, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_CustomEvent_True_1' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_CustomEvent_True) == 0x0001BB, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_CustomEvent_True' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_CreateDelegate_OutputDelegate_1) == 0x0001BC, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_MakeStruct_GraphicSettings_1) == 0x0001CC, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_MakeStruct_GraphicSettings_1' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_GetGameInstance_ReturnValue) == 0x0001F8, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_DynamicCast_AsMain_GI) == 0x000200, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_DynamicCast_AsMain_GI' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_DynamicCast_bSuccess_2) == 0x000208, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_CustomEvent_Client_Only) == 0x000209, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_CustomEvent_Client_Only' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_GetGameInstance_ReturnValue_1) == 0x000210, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_DynamicCast_AsMain_GI_1) == 0x000218, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_DynamicCast_AsMain_GI_1' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_DynamicCast_bSuccess_3) == 0x000220, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_Get_Fog_Quality_ReturnValue_1) == 0x000224, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_Get_Fog_Quality_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_GetViewportSize_ReturnValue) == 0x000228, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_Conv_IntToString_ReturnValue) == 0x000238, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_BreakVector2D_X) == 0x000248, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_BreakVector2D_Y) == 0x000250, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_Concat_StrStr_ReturnValue) == 0x000258, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_SetCurrentCulture_ReturnValue) == 0x000268, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_SetCurrentCulture_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000269, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, Temp_real_Variable) == 0x00026C, "Member 'PC_C_ExecuteUbergraph_PC::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, Temp_real_Variable_1) == 0x000270, "Member 'PC_C_ExecuteUbergraph_PC::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_GetSupportedFullscreenResolutions_Resolutions) == 0x000278, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_GetSupportedFullscreenResolutions_Resolutions' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_GetSupportedFullscreenResolutions_ReturnValue) == 0x000288, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_GetSupportedFullscreenResolutions_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_Select_Default) == 0x00028C, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_Array_LastIndex_ReturnValue) == 0x000290, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_Array_Get_Item) == 0x000294, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_GetFramePace_ReturnValue) == 0x00029C, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_GetFramePace_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_Greater_IntInt_ReturnValue) == 0x0002A0, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0002A1, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_SaveGameToSlot_ReturnValue_1) == 0x0002A2, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_SaveGameToSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_CreateSaveGameObject_ReturnValue) == 0x0002A8, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_CreateSaveGameObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_InputKeyEvent_Key) == 0x0002B0, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, CallFunc_LoadGameFromSlot_ReturnValue) == 0x0002C8, "Member 'PC_C_ExecuteUbergraph_PC::CallFunc_LoadGameFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_DynamicCast_AsSave_Settings) == 0x0002D0, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_DynamicCast_AsSave_Settings' has a wrong offset!");
static_assert(offsetof(PC_C_ExecuteUbergraph_PC, K2Node_DynamicCast_bSuccess_4) == 0x0002D8, "Member 'PC_C_ExecuteUbergraph_PC::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");

// Function PC.PC_C.Force World Volume
// 0x0001 (0x0001 - 0x0000)
struct PC_C_Force_World_Volume final
{
public:
	bool                                          TRUE_0;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Force_World_Volume) == 0x000001, "Wrong alignment on PC_C_Force_World_Volume");
static_assert(sizeof(PC_C_Force_World_Volume) == 0x000001, "Wrong size on PC_C_Force_World_Volume");
static_assert(offsetof(PC_C_Force_World_Volume, TRUE_0) == 0x000000, "Member 'PC_C_Force_World_Volume::TRUE_0' has a wrong offset!");

// Function PC.PC_C.Get Fog Quality
// 0x0070 (0x0070 - 0x0000)
struct PC_C_Get_Fog_Quality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Get_Fog_Quality) == 0x000008, "Wrong alignment on PC_C_Get_Fog_Quality");
static_assert(sizeof(PC_C_Get_Fog_Quality) == 0x000070, "Wrong size on PC_C_Get_Fog_Quality");
static_assert(offsetof(PC_C_Get_Fog_Quality, ReturnValue) == 0x000000, "Member 'PC_C_Get_Fog_Quality::ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, Temp_int_Variable) == 0x000004, "Member 'PC_C_Get_Fog_Quality::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, Temp_int_Variable_1) == 0x000008, "Member 'PC_C_Get_Fog_Quality::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, Temp_int_Variable_2) == 0x00000C, "Member 'PC_C_Get_Fog_Quality::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, Temp_int_Variable_3) == 0x000010, "Member 'PC_C_Get_Fog_Quality::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000018, "Member 'PC_C_Get_Fog_Quality::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, CallFunc_GetViewportSize_ReturnValue) == 0x000020, "Member 'PC_C_Get_Fog_Quality::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'PC_C_Get_Fog_Quality::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, CallFunc_BreakVector2D_X) == 0x000038, "Member 'PC_C_Get_Fog_Quality::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, CallFunc_BreakVector2D_Y) == 0x000040, "Member 'PC_C_Get_Fog_Quality::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, K2Node_Select_Default) == 0x000048, "Member 'PC_C_Get_Fog_Quality::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000050, "Member 'PC_C_Get_Fog_Quality::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000058, "Member 'PC_C_Get_Fog_Quality::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000060, "Member 'PC_C_Get_Fog_Quality::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Fog_Quality, CallFunc_FTrunc_ReturnValue) == 0x000068, "Member 'PC_C_Get_Fog_Quality::CallFunc_FTrunc_ReturnValue' has a wrong offset!");

// Function PC.PC_C.Get Resolutions
// 0x0030 (0x0030 - 0x0000)
struct PC_C_Get_Resolutions final
{
public:
	TArray<struct FIntPoint>                      Resolutions;                                       // 0x0000(0x0010)(Parm, OutParm)
	TArray<struct FIntPoint>                      CallFunc_GetSupportedFullscreenResolutions_Resolutions; // 0x0010(0x0010)(ReferenceParm)
	bool                                          CallFunc_GetSupportedFullscreenResolutions_ReturnValue; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Get_Resolutions) == 0x000008, "Wrong alignment on PC_C_Get_Resolutions");
static_assert(sizeof(PC_C_Get_Resolutions) == 0x000030, "Wrong size on PC_C_Get_Resolutions");
static_assert(offsetof(PC_C_Get_Resolutions, Resolutions) == 0x000000, "Member 'PC_C_Get_Resolutions::Resolutions' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Resolutions, CallFunc_GetSupportedFullscreenResolutions_Resolutions) == 0x000010, "Member 'PC_C_Get_Resolutions::CallFunc_GetSupportedFullscreenResolutions_Resolutions' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Resolutions, CallFunc_GetSupportedFullscreenResolutions_ReturnValue) == 0x000020, "Member 'PC_C_Get_Resolutions::CallFunc_GetSupportedFullscreenResolutions_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Get_Resolutions, CallFunc_GetGameUserSettings_ReturnValue) == 0x000028, "Member 'PC_C_Get_Resolutions::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");

// Function PC.PC_C.Graphic Commands
// 0x0208 (0x0208 - 0x0000)
struct PC_C_Graphic_Commands final
{
public:
	double                                        Frame_Weight;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sharpen;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScreenPercentage;                                  // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Near_Clip;                                         // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Fog;                                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DOF_Quality;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Bloom_Quality;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Motion_Blur;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AO;                                                // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AA;                                                // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue;                 // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_1;               // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_2;               // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_SelectString_ReturnValue_3;               // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_1;        // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SelectString_ReturnValue_4;               // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_SelectString_ReturnValue_5;               // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_2;        // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Graphic_Commands) == 0x000008, "Wrong alignment on PC_C_Graphic_Commands");
static_assert(sizeof(PC_C_Graphic_Commands) == 0x000208, "Wrong size on PC_C_Graphic_Commands");
static_assert(offsetof(PC_C_Graphic_Commands, Frame_Weight) == 0x000000, "Member 'PC_C_Graphic_Commands::Frame_Weight' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, Sharpen) == 0x000008, "Member 'PC_C_Graphic_Commands::Sharpen' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, ScreenPercentage) == 0x000010, "Member 'PC_C_Graphic_Commands::ScreenPercentage' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, Near_Clip) == 0x000014, "Member 'PC_C_Graphic_Commands::Near_Clip' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, Fog) == 0x000018, "Member 'PC_C_Graphic_Commands::Fog' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, DOF_Quality) == 0x00001C, "Member 'PC_C_Graphic_Commands::DOF_Quality' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, Bloom_Quality) == 0x000020, "Member 'PC_C_Graphic_Commands::Bloom_Quality' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, Motion_Blur) == 0x000024, "Member 'PC_C_Graphic_Commands::Motion_Blur' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, AO) == 0x000028, "Member 'PC_C_Graphic_Commands::AO' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, AA) == 0x000029, "Member 'PC_C_Graphic_Commands::AA' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000030, "Member 'PC_C_Graphic_Commands::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_SelectString_ReturnValue) == 0x000040, "Member 'PC_C_Graphic_Commands::CallFunc_SelectString_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_SelectString_ReturnValue_1) == 0x000050, "Member 'PC_C_Graphic_Commands::CallFunc_SelectString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue) == 0x000060, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000070, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_SelectString_ReturnValue_2) == 0x000080, "Member 'PC_C_Graphic_Commands::CallFunc_SelectString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'PC_C_Graphic_Commands::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000098, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_SelectString_ReturnValue_3) == 0x0000A8, "Member 'PC_C_Graphic_Commands::CallFunc_SelectString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000B8, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Conv_IntToString_ReturnValue) == 0x0000C8, "Member 'PC_C_Graphic_Commands::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000D8, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000E8, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0000F8, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000108, "Member 'PC_C_Graphic_Commands::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000110, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000120, "Member 'PC_C_Graphic_Commands::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Conv_DoubleToString_ReturnValue_1) == 0x000128, "Member 'PC_C_Graphic_Commands::CallFunc_Conv_DoubleToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000138, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Greater_IntInt_ReturnValue) == 0x000148, "Member 'PC_C_Graphic_Commands::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_SelectString_ReturnValue_4) == 0x000150, "Member 'PC_C_Graphic_Commands::CallFunc_SelectString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000160, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000170, "Member 'PC_C_Graphic_Commands::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_SelectString_ReturnValue_5) == 0x000178, "Member 'PC_C_Graphic_Commands::CallFunc_SelectString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000188, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000198, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0001A8, "Member 'PC_C_Graphic_Commands::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0001B8, "Member 'PC_C_Graphic_Commands::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_12) == 0x0001C8, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_13) == 0x0001D8, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Conv_DoubleToString_ReturnValue_2) == 0x0001E8, "Member 'PC_C_Graphic_Commands::CallFunc_Conv_DoubleToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PC_C_Graphic_Commands, CallFunc_Concat_StrStr_ReturnValue_14) == 0x0001F8, "Member 'PC_C_Graphic_Commands::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");

// Function PC.PC_C.InpActEvt_AnyKey_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct PC_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on PC_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0");
static_assert(sizeof(PC_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on PC_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0");
static_assert(offsetof(PC_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'PC_C_InpActEvt_AnyKey_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function PC.PC_C.Invite Accepted
// 0x0138 (0x0138 - 0x0000)
struct PC_C_Invite_Accepted final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LocalPlayerNum;                                    // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 InvitedBy;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FBlueprintSessionResult                Session;                                           // 0x0018(0x0120)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PC_C_Invite_Accepted) == 0x000008, "Wrong alignment on PC_C_Invite_Accepted");
static_assert(sizeof(PC_C_Invite_Accepted) == 0x000138, "Wrong size on PC_C_Invite_Accepted");
static_assert(offsetof(PC_C_Invite_Accepted, bWasSuccessful) == 0x000000, "Member 'PC_C_Invite_Accepted::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(PC_C_Invite_Accepted, LocalPlayerNum) == 0x000004, "Member 'PC_C_Invite_Accepted::LocalPlayerNum' has a wrong offset!");
static_assert(offsetof(PC_C_Invite_Accepted, InvitedBy) == 0x000008, "Member 'PC_C_Invite_Accepted::InvitedBy' has a wrong offset!");
static_assert(offsetof(PC_C_Invite_Accepted, Session) == 0x000018, "Member 'PC_C_Invite_Accepted::Session' has a wrong offset!");

// Function PC.PC_C.Quit Session by Force
// 0x0001 (0x0001 - 0x0000)
struct PC_C_Quit_Session_by_Force final
{
public:
	bool                                          Client_Only;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Quit_Session_by_Force) == 0x000001, "Wrong alignment on PC_C_Quit_Session_by_Force");
static_assert(sizeof(PC_C_Quit_Session_by_Force) == 0x000001, "Wrong size on PC_C_Quit_Session_by_Force");
static_assert(offsetof(PC_C_Quit_Session_by_Force, Client_Only) == 0x000000, "Member 'PC_C_Quit_Session_by_Force::Client_Only' has a wrong offset!");

// Function PC.PC_C.ReceivePossess
// 0x0008 (0x0008 - 0x0000)
struct PC_C_ReceivePossess final
{
public:
	class APawn*                                  PossessedPawn;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_ReceivePossess) == 0x000008, "Wrong alignment on PC_C_ReceivePossess");
static_assert(sizeof(PC_C_ReceivePossess) == 0x000008, "Wrong size on PC_C_ReceivePossess");
static_assert(offsetof(PC_C_ReceivePossess, PossessedPawn) == 0x000000, "Member 'PC_C_ReceivePossess::PossessedPawn' has a wrong offset!");

// Function PC.PC_C.Set Antialiasing
// 0x0001 (0x0001 - 0x0000)
struct PC_C_Set_Antialiasing final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Antialiasing) == 0x000001, "Wrong alignment on PC_C_Set_Antialiasing");
static_assert(sizeof(PC_C_Set_Antialiasing) == 0x000001, "Wrong size on PC_C_Set_Antialiasing");
static_assert(offsetof(PC_C_Set_Antialiasing, Value) == 0x000000, "Member 'PC_C_Set_Antialiasing::Value' has a wrong offset!");

// Function PC.PC_C.Set Bloom Quality
// 0x0004 (0x0004 - 0x0000)
struct PC_C_Set_Bloom_Quality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Bloom_Quality) == 0x000004, "Wrong alignment on PC_C_Set_Bloom_Quality");
static_assert(sizeof(PC_C_Set_Bloom_Quality) == 0x000004, "Wrong size on PC_C_Set_Bloom_Quality");
static_assert(offsetof(PC_C_Set_Bloom_Quality, Value) == 0x000000, "Member 'PC_C_Set_Bloom_Quality::Value' has a wrong offset!");

// Function PC.PC_C.Set DOF Quality
// 0x0004 (0x0004 - 0x0000)
struct PC_C_Set_DOF_Quality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_DOF_Quality) == 0x000004, "Wrong alignment on PC_C_Set_DOF_Quality");
static_assert(sizeof(PC_C_Set_DOF_Quality) == 0x000004, "Wrong size on PC_C_Set_DOF_Quality");
static_assert(offsetof(PC_C_Set_DOF_Quality, Value) == 0x000000, "Member 'PC_C_Set_DOF_Quality::Value' has a wrong offset!");

// Function PC.PC_C.Set Fog Quality
// 0x0004 (0x0004 - 0x0000)
struct PC_C_Set_Fog_Quality final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Fog_Quality) == 0x000004, "Wrong alignment on PC_C_Set_Fog_Quality");
static_assert(sizeof(PC_C_Set_Fog_Quality) == 0x000004, "Wrong size on PC_C_Set_Fog_Quality");
static_assert(offsetof(PC_C_Set_Fog_Quality, Value) == 0x000000, "Member 'PC_C_Set_Fog_Quality::Value' has a wrong offset!");

// Function PC.PC_C.Set FPS Cap
// 0x0020 (0x0020 - 0x0000)
struct PC_C_Set_FPS_Cap final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFrameRateLimit_NewLimit_ImplicitCast;  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_FPS_Cap) == 0x000008, "Wrong alignment on PC_C_Set_FPS_Cap");
static_assert(sizeof(PC_C_Set_FPS_Cap) == 0x000020, "Wrong size on PC_C_Set_FPS_Cap");
static_assert(offsetof(PC_C_Set_FPS_Cap, Value) == 0x000000, "Member 'PC_C_Set_FPS_Cap::Value' has a wrong offset!");
static_assert(offsetof(PC_C_Set_FPS_Cap, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000008, "Member 'PC_C_Set_FPS_Cap::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_FPS_Cap, CallFunc_GetGameUserSettings_ReturnValue) == 0x000010, "Member 'PC_C_Set_FPS_Cap::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_FPS_Cap, CallFunc_SetFrameRateLimit_NewLimit_ImplicitCast) == 0x000018, "Member 'PC_C_Set_FPS_Cap::CallFunc_SetFrameRateLimit_NewLimit_ImplicitCast' has a wrong offset!");

// Function PC.PC_C.Set Global Volume
// 0x0030 (0x0030 - 0x0000)
struct PC_C_Set_Global_Volume final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSubmixOutputVolume_InOutputVolume_ImplicitCast; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Global_Volume) == 0x000008, "Wrong alignment on PC_C_Set_Global_Volume");
static_assert(sizeof(PC_C_Set_Global_Volume) == 0x000030, "Wrong size on PC_C_Set_Global_Volume");
static_assert(offsetof(PC_C_Set_Global_Volume, Value) == 0x000000, "Member 'PC_C_Set_Global_Volume::Value' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Global_Volume, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'PC_C_Set_Global_Volume::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Global_Volume, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000008, "Member 'PC_C_Set_Global_Volume::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Global_Volume, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'PC_C_Set_Global_Volume::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Global_Volume, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000018, "Member 'PC_C_Set_Global_Volume::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Global_Volume, CallFunc_SelectFloat_ReturnValue) == 0x000020, "Member 'PC_C_Set_Global_Volume::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Global_Volume, CallFunc_SetSubmixOutputVolume_InOutputVolume_ImplicitCast) == 0x000028, "Member 'PC_C_Set_Global_Volume::CallFunc_SetSubmixOutputVolume_InOutputVolume_ImplicitCast' has a wrong offset!");

// Function PC.PC_C.Set Indirect
// 0x0001 (0x0001 - 0x0000)
struct PC_C_Set_Indirect final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Indirect) == 0x000001, "Wrong alignment on PC_C_Set_Indirect");
static_assert(sizeof(PC_C_Set_Indirect) == 0x000001, "Wrong size on PC_C_Set_Indirect");
static_assert(offsetof(PC_C_Set_Indirect, On) == 0x000000, "Member 'PC_C_Set_Indirect::On' has a wrong offset!");

// Function PC.PC_C.Set Mic Gate
// 0x0004 (0x0004 - 0x0000)
struct PC_C_Set_Mic_Gate final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Mic_Gate) == 0x000004, "Wrong alignment on PC_C_Set_Mic_Gate");
static_assert(sizeof(PC_C_Set_Mic_Gate) == 0x000004, "Wrong size on PC_C_Set_Mic_Gate");
static_assert(offsetof(PC_C_Set_Mic_Gate, Value) == 0x000000, "Member 'PC_C_Set_Mic_Gate::Value' has a wrong offset!");

// Function PC.PC_C.Set Mic Volume
// 0x0004 (0x0004 - 0x0000)
struct PC_C_Set_Mic_Volume final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Mic_Volume) == 0x000004, "Wrong alignment on PC_C_Set_Mic_Volume");
static_assert(sizeof(PC_C_Set_Mic_Volume) == 0x000004, "Wrong size on PC_C_Set_Mic_Volume");
static_assert(offsetof(PC_C_Set_Mic_Volume, Value) == 0x000000, "Member 'PC_C_Set_Mic_Volume::Value' has a wrong offset!");

// Function PC.PC_C.Set MotionBlur
// 0x0004 (0x0004 - 0x0000)
struct PC_C_Set_MotionBlur final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_MotionBlur) == 0x000004, "Wrong alignment on PC_C_Set_MotionBlur");
static_assert(sizeof(PC_C_Set_MotionBlur) == 0x000004, "Wrong size on PC_C_Set_MotionBlur");
static_assert(offsetof(PC_C_Set_MotionBlur, Value) == 0x000000, "Member 'PC_C_Set_MotionBlur::Value' has a wrong offset!");

// Function PC.PC_C.Set Reflections
// 0x0004 (0x0004 - 0x0000)
struct PC_C_Set_Reflections final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Reflections) == 0x000004, "Wrong alignment on PC_C_Set_Reflections");
static_assert(sizeof(PC_C_Set_Reflections) == 0x000004, "Wrong size on PC_C_Set_Reflections");
static_assert(offsetof(PC_C_Set_Reflections, Value) == 0x000000, "Member 'PC_C_Set_Reflections::Value' has a wrong offset!");

// Function PC.PC_C.Set Reflex
// 0x0008 (0x0008 - 0x0000)
struct PC_C_Set_Reflex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetReflexAvailable_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Reflex) == 0x000004, "Wrong alignment on PC_C_Set_Reflex");
static_assert(sizeof(PC_C_Set_Reflex) == 0x000008, "Wrong size on PC_C_Set_Reflex");
static_assert(offsetof(PC_C_Set_Reflex, Value) == 0x000000, "Member 'PC_C_Set_Reflex::Value' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Reflex, K2Node_SwitchInteger_CmpSuccess) == 0x000004, "Member 'PC_C_Set_Reflex::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Reflex, CallFunc_GetReflexAvailable_ReturnValue) == 0x000005, "Member 'PC_C_Set_Reflex::CallFunc_GetReflexAvailable_ReturnValue' has a wrong offset!");

// Function PC.PC_C.Set RenderScale
// 0x0004 (0x0004 - 0x0000)
struct PC_C_Set_RenderScale final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_RenderScale) == 0x000004, "Wrong alignment on PC_C_Set_RenderScale");
static_assert(sizeof(PC_C_Set_RenderScale) == 0x000004, "Wrong size on PC_C_Set_RenderScale");
static_assert(offsetof(PC_C_Set_RenderScale, Value) == 0x000000, "Member 'PC_C_Set_RenderScale::Value' has a wrong offset!");

// Function PC.PC_C.Set Resolution
// 0x0038 (0x0038 - 0x0000)
struct PC_C_Set_Resolution final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FIntPoint>                      CallFunc_GetSupportedFullscreenResolutions_Resolutions; // 0x0008(0x0010)(ReferenceParm)
	bool                                          CallFunc_GetSupportedFullscreenResolutions_ReturnValue; // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FIntPoint                              CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Resolution) == 0x000008, "Wrong alignment on PC_C_Set_Resolution");
static_assert(sizeof(PC_C_Set_Resolution) == 0x000038, "Wrong size on PC_C_Set_Resolution");
static_assert(offsetof(PC_C_Set_Resolution, Value) == 0x000000, "Member 'PC_C_Set_Resolution::Value' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Resolution, CallFunc_GetSupportedFullscreenResolutions_Resolutions) == 0x000008, "Member 'PC_C_Set_Resolution::CallFunc_GetSupportedFullscreenResolutions_Resolutions' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Resolution, CallFunc_GetSupportedFullscreenResolutions_ReturnValue) == 0x000018, "Member 'PC_C_Set_Resolution::CallFunc_GetSupportedFullscreenResolutions_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Resolution, CallFunc_GetGameUserSettings_ReturnValue) == 0x000020, "Member 'PC_C_Set_Resolution::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Resolution, CallFunc_Array_Get_Item) == 0x000028, "Member 'PC_C_Set_Resolution::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Resolution, CallFunc_Array_LastIndex_ReturnValue) == 0x000030, "Member 'PC_C_Set_Resolution::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Resolution, CallFunc_Clamp_ReturnValue) == 0x000034, "Member 'PC_C_Set_Resolution::CallFunc_Clamp_ReturnValue' has a wrong offset!");

// Function PC.PC_C.Set Screen Mode
// 0x0020 (0x0020 - 0x0000)
struct PC_C_Set_Screen_Mode final
{
public:
	EWindowMode                                   Mode;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              CallFunc_GetDesktopResolution_ReturnValue;         // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_Screen_Mode) == 0x000008, "Wrong alignment on PC_C_Set_Screen_Mode");
static_assert(sizeof(PC_C_Set_Screen_Mode) == 0x000020, "Wrong size on PC_C_Set_Screen_Mode");
static_assert(offsetof(PC_C_Set_Screen_Mode, Mode) == 0x000000, "Member 'PC_C_Set_Screen_Mode::Mode' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Screen_Mode, CallFunc_GetGameUserSettings_ReturnValue) == 0x000008, "Member 'PC_C_Set_Screen_Mode::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Screen_Mode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'PC_C_Set_Screen_Mode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(PC_C_Set_Screen_Mode, CallFunc_GetDesktopResolution_ReturnValue) == 0x000014, "Member 'PC_C_Set_Screen_Mode::CallFunc_GetDesktopResolution_ReturnValue' has a wrong offset!");

// Function PC.PC_C.Set VSync
// 0x0018 (0x0018 - 0x0000)
struct PC_C_Set_VSync final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameUserSettings*                      CallFunc_GetGameUserSettings_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_VSync) == 0x000008, "Wrong alignment on PC_C_Set_VSync");
static_assert(sizeof(PC_C_Set_VSync) == 0x000018, "Wrong size on PC_C_Set_VSync");
static_assert(offsetof(PC_C_Set_VSync, Value) == 0x000000, "Member 'PC_C_Set_VSync::Value' has a wrong offset!");
static_assert(offsetof(PC_C_Set_VSync, Temp_int_Variable) == 0x000004, "Member 'PC_C_Set_VSync::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(PC_C_Set_VSync, Temp_bool_Variable) == 0x000008, "Member 'PC_C_Set_VSync::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PC_C_Set_VSync, Temp_bool_Variable_1) == 0x000009, "Member 'PC_C_Set_VSync::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(PC_C_Set_VSync, K2Node_Select_Default) == 0x00000A, "Member 'PC_C_Set_VSync::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(PC_C_Set_VSync, CallFunc_GetGameUserSettings_ReturnValue) == 0x000010, "Member 'PC_C_Set_VSync::CallFunc_GetGameUserSettings_ReturnValue' has a wrong offset!");

// Function PC.PC_C.Set World Volume
// 0x0001 (0x0001 - 0x0000)
struct PC_C_Set_World_Volume final
{
public:
	bool                                          TRUE_0;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PC_C_Set_World_Volume) == 0x000001, "Wrong alignment on PC_C_Set_World_Volume");
static_assert(sizeof(PC_C_Set_World_Volume) == 0x000001, "Wrong size on PC_C_Set_World_Volume");
static_assert(offsetof(PC_C_Set_World_Volume, TRUE_0) == 0x000000, "Member 'PC_C_Set_World_Volume::TRUE_0' has a wrong offset!");

}

