#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BottleSlot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BottleSlot.BottleSlot_C
// 0x00A8 (0x0350 - 0x02A8)
class ABottleSlot_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Map_Position;                                      // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   C_SoundPath;                                       // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MapMesh_TaskMachine_MachineSocket;                 // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Explosion_Root;                                    // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mid_Light;                                         // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   C_Bottle;                                          // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Pressure;                                          // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Level;                                             // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMachinePannel_C*                       MachinePannel;                                     // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AItemSlot_C*                            Bottle;                                            // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Bottle_Change;                                     // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Lock;                                              // 0x0318(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Request_Level;                                     // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         State;                                             // 0x0320(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           OverPressure_Timer;                                // 0x0328(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Explosion;                                         // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ASoundPath_C*                           Sound_Path;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Side;                                              // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__MachineSide_Mid_Bottle_K2Node_ComponentBoundEvent_3_Place_Item__DelegateSignature();
	void BndEvt__MachineSide_Mid_Bottle_K2Node_ComponentBoundEvent_4_Take_Item__DelegateSignature();
	void Clear();
	void ExecuteUbergraph_BottleSlot(int32 EntryPoint);
	void Explosion_Sound();
	void Get_Map_Position(struct FVector* Location);
	void OnRep_Level();
	void OnRep_Lock();
	void OnRep_State();
	void OverPressure_Tick();
	void ReceiveBeginPlay();
	void Set_Pressure(int32 Pressure_0);
	void Set_State(int32 TRUE_0);
	void Try_Set_State(int32 Value);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BottleSlot_C">();
	}
	static class ABottleSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABottleSlot_C>();
	}
};
static_assert(alignof(ABottleSlot_C) == 0x000008, "Wrong alignment on ABottleSlot_C");
static_assert(sizeof(ABottleSlot_C) == 0x000350, "Wrong size on ABottleSlot_C");
static_assert(offsetof(ABottleSlot_C, UberGraphFrame) == 0x0002A8, "Member 'ABottleSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, StaticMesh) == 0x0002B0, "Member 'ABottleSlot_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Map_Position) == 0x0002B8, "Member 'ABottleSlot_C::Map_Position' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, C_SoundPath) == 0x0002C0, "Member 'ABottleSlot_C::C_SoundPath' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, MapMesh_TaskMachine_MachineSocket) == 0x0002C8, "Member 'ABottleSlot_C::MapMesh_TaskMachine_MachineSocket' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Explosion_Root) == 0x0002D0, "Member 'ABottleSlot_C::Explosion_Root' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Mid_Light) == 0x0002D8, "Member 'ABottleSlot_C::Mid_Light' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, C_Bottle) == 0x0002E0, "Member 'ABottleSlot_C::C_Bottle' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABottleSlot_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Pressure) == 0x0002F0, "Member 'ABottleSlot_C::Pressure' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Level) == 0x0002F4, "Member 'ABottleSlot_C::Level' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, MachinePannel) == 0x0002F8, "Member 'ABottleSlot_C::MachinePannel' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Bottle) == 0x000300, "Member 'ABottleSlot_C::Bottle' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Bottle_Change) == 0x000308, "Member 'ABottleSlot_C::Bottle_Change' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Lock) == 0x000318, "Member 'ABottleSlot_C::Lock' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Request_Level) == 0x00031C, "Member 'ABottleSlot_C::Request_Level' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, State) == 0x000320, "Member 'ABottleSlot_C::State' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, OverPressure_Timer) == 0x000328, "Member 'ABottleSlot_C::OverPressure_Timer' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Explosion) == 0x000330, "Member 'ABottleSlot_C::Explosion' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Sound_Path) == 0x000340, "Member 'ABottleSlot_C::Sound_Path' has a wrong offset!");
static_assert(offsetof(ABottleSlot_C, Side) == 0x000348, "Member 'ABottleSlot_C::Side' has a wrong offset!");

}

