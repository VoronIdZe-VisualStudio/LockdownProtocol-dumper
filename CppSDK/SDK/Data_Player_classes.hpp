#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Data_Player

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Data_Player.Data_Player_C
// 0x01F8 (0x0228 - 0x0030)
class UData_Player_C final : public UPrimaryDataAsset
{
public:
	int32                                         Body_Armor_1;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Body_Armor_2;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Body_Armor_3;                                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Head_Armor_1;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Head_Armor_2;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Head_Armor_3;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weakness_1;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weakness_2;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Weakness_3;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed_1;                                           // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed_2;                                           // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed_3;                                           // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Slow_1;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Slow_2;                                            // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Slow_3;                                            // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Default_Speed;                                     // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Max_HP;                                            // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Point_Main_Intensity;                              // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point_Hands_Intensity;                             // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Point_Hands_Spring;                                // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Hands_Axis_Target;                                 // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Hands_DOF;                                         // 0x00F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Light;                                             // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Tablet_DOF;                                        // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tablet_Main_Intensity;                             // 0x0130(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tablet_Hands_Intensity;                            // 0x0148(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tablet_Hands_Spring;                               // 0x0160(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tablet_Axis_Target;                                // 0x0178(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Light_CD;                                          // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Exhaust_CD;                                        // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Run_Cost;                                          // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Regen;                                         // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Regen;                                         // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Regen_HP_Speed;                                    // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Debug_Heal_Hit;                                    // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Debug_Stamina_Hit;                                 // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Debug_Stun;                                        // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerMap_Location_X;                              // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerMap_Location_Y;                              // 0x01E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerMap_Result_X;                                // 0x01F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerMap_Result_Y;                                // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Jump_Stamina;                                      // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Fall_Stamina;                                      // 0x0218(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Data_Player_C">();
	}
	static class UData_Player_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UData_Player_C>();
	}
};
static_assert(alignof(UData_Player_C) == 0x000008, "Wrong alignment on UData_Player_C");
static_assert(sizeof(UData_Player_C) == 0x000228, "Wrong size on UData_Player_C");
static_assert(offsetof(UData_Player_C, Body_Armor_1) == 0x000030, "Member 'UData_Player_C::Body_Armor_1' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Body_Armor_2) == 0x000034, "Member 'UData_Player_C::Body_Armor_2' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Body_Armor_3) == 0x000038, "Member 'UData_Player_C::Body_Armor_3' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Head_Armor_1) == 0x00003C, "Member 'UData_Player_C::Head_Armor_1' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Head_Armor_2) == 0x000040, "Member 'UData_Player_C::Head_Armor_2' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Head_Armor_3) == 0x000044, "Member 'UData_Player_C::Head_Armor_3' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Weakness_1) == 0x000048, "Member 'UData_Player_C::Weakness_1' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Weakness_2) == 0x00004C, "Member 'UData_Player_C::Weakness_2' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Weakness_3) == 0x000050, "Member 'UData_Player_C::Weakness_3' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Speed_1) == 0x000058, "Member 'UData_Player_C::Speed_1' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Speed_2) == 0x000060, "Member 'UData_Player_C::Speed_2' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Speed_3) == 0x000068, "Member 'UData_Player_C::Speed_3' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Slow_1) == 0x000070, "Member 'UData_Player_C::Slow_1' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Slow_2) == 0x000078, "Member 'UData_Player_C::Slow_2' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Slow_3) == 0x000080, "Member 'UData_Player_C::Slow_3' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Default_Speed) == 0x000088, "Member 'UData_Player_C::Default_Speed' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Max_HP) == 0x000090, "Member 'UData_Player_C::Max_HP' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Point_Main_Intensity) == 0x000098, "Member 'UData_Player_C::Point_Main_Intensity' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Point_Hands_Intensity) == 0x0000B0, "Member 'UData_Player_C::Point_Hands_Intensity' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Point_Hands_Spring) == 0x0000C8, "Member 'UData_Player_C::Point_Hands_Spring' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Hands_Axis_Target) == 0x0000E0, "Member 'UData_Player_C::Hands_Axis_Target' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Hands_DOF) == 0x0000F8, "Member 'UData_Player_C::Hands_DOF' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Light) == 0x000110, "Member 'UData_Player_C::Light' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Tablet_DOF) == 0x000118, "Member 'UData_Player_C::Tablet_DOF' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Tablet_Main_Intensity) == 0x000130, "Member 'UData_Player_C::Tablet_Main_Intensity' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Tablet_Hands_Intensity) == 0x000148, "Member 'UData_Player_C::Tablet_Hands_Intensity' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Tablet_Hands_Spring) == 0x000160, "Member 'UData_Player_C::Tablet_Hands_Spring' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Tablet_Axis_Target) == 0x000178, "Member 'UData_Player_C::Tablet_Axis_Target' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Light_CD) == 0x000190, "Member 'UData_Player_C::Light_CD' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Exhaust_CD) == 0x000198, "Member 'UData_Player_C::Exhaust_CD' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Run_Cost) == 0x0001A0, "Member 'UData_Player_C::Run_Cost' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Min_Regen) == 0x0001A8, "Member 'UData_Player_C::Min_Regen' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Max_Regen) == 0x0001B0, "Member 'UData_Player_C::Max_Regen' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Regen_HP_Speed) == 0x0001B8, "Member 'UData_Player_C::Regen_HP_Speed' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Debug_Heal_Hit) == 0x0001C0, "Member 'UData_Player_C::Debug_Heal_Hit' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Debug_Stamina_Hit) == 0x0001C4, "Member 'UData_Player_C::Debug_Stamina_Hit' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Debug_Stun) == 0x0001C8, "Member 'UData_Player_C::Debug_Stun' has a wrong offset!");
static_assert(offsetof(UData_Player_C, PlayerMap_Location_X) == 0x0001D0, "Member 'UData_Player_C::PlayerMap_Location_X' has a wrong offset!");
static_assert(offsetof(UData_Player_C, PlayerMap_Location_Y) == 0x0001E0, "Member 'UData_Player_C::PlayerMap_Location_Y' has a wrong offset!");
static_assert(offsetof(UData_Player_C, PlayerMap_Result_X) == 0x0001F0, "Member 'UData_Player_C::PlayerMap_Result_X' has a wrong offset!");
static_assert(offsetof(UData_Player_C, PlayerMap_Result_Y) == 0x000200, "Member 'UData_Player_C::PlayerMap_Result_Y' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Jump_Stamina) == 0x000210, "Member 'UData_Player_C::Jump_Stamina' has a wrong offset!");
static_assert(offsetof(UData_Player_C, Fall_Stamina) == 0x000218, "Member 'UData_Player_C::Fall_Stamina' has a wrong offset!");

}

