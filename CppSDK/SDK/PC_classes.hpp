#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PC

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PC.PC_C
// 0x0258 (0x0AB0 - 0x0858)
class APC_C final : public APlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0858(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Volume_Transition_NewTrack_0_13C24D3344B680374D2A67BE80DB5354; // 0x0860(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Volume_Transition__Direction_13C24D3344B680374D2A67BE80DB5354; // 0x0864(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_865[0x3];                                      // 0x0865(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Volume_Transition;                                 // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                GI_Ref;                                            // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FBlueprintSessionResult                Current_Session;                                   // 0x0878(0x0120)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AGM_C*                                  GM_Ref;                                            // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AMec_C*                                 Mec_Ref;                                           // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Menu_Open;                                         // 0x09A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A9[0x7];                                      // 0x09A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Camera_Sensitivity;                                // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Graphic_AO;                                        // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWindowMode                                   Graphic_ScreenMode;                                // 0x09B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9BA[0x2];                                      // 0x09BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Graphic_Fog;                                       // 0x09BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Graphic_Reflex;                                    // 0x09C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Graphic_Vsync;                                     // 0x09C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C5[0x3];                                      // 0x09C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Graphic_RenderScale;                               // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Graphic_DOF;                                       // 0x09CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Graphic_Bloom;                                     // 0x09D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D4[0x4];                                      // 0x09D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FKey& Key)> Press_Any_Key;                            // 0x09D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Default_Walk;                                      // 0x09E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Default_Talk;                                      // 0x09E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_H;                                          // 0x09EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_V;                                          // 0x09EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FPS_Cap;                                           // 0x09EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Graphic_Motion;                                    // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Mic_Gate;                                          // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Mic_Volume;                                        // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AntiAliasing;                                      // 0x09FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FD[0x3];                                      // 0x09FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Reflections;                                       // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedResolution;                                // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USave_Settings_C*                       Save_Settings;                                     // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UInputMappingContext*                   DefaultInputs;                                     // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundSubmix*                           MainSubmix_Ref;                                    // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UW_GI_HUD_C*                            Overlay_HUD;                                       // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Lauching;                                          // 0x0A28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2C[0x4];                                      // 0x0A2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundSubmix*                           World_Mixer;                                       // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Stick_Sensitivity;                                 // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stick_Min_Zone;                                    // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stick_Max_Zone;                                    // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stick_Linearity;                                   // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stick_Boost;                                       // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_H_G;                                        // 0x0A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Invert_V_G;                                        // 0x0A61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A62[0x6];                                      // 0x0A62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Stick_Ratio;                                       // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stick_Walk;                                        // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stick_Run;                                         // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Gamepad;                                       // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A81[0x7];                                      // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool TRUE)>     Set_Active_Trigger;                                // 0x0A88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Trigger_Activation;                                // 0x0A98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A99[0x7];                                      // 0x0A99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Last_Resolution;                                   // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USubmixEffectDynamicsProcessorPreset*   AudioClamp_Ref;                                    // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Apply_Graphics_Settings();
	void Apply_Mic_Settings();
	void Check_Resolution();
	void ExecuteUbergraph_PC(int32 EntryPoint);
	void Force_World_Volume(bool TRUE_0);
	int32 Get_Fog_Quality();
	void Get_Resolutions(TArray<struct FIntPoint>* Resolutions);
	void Graphic_Commands(double Frame_Weight, double Sharpen, int32 ScreenPercentage, int32 Near_Clip, int32 Fog, int32 DOF_Quality, int32 Bloom_Quality, int32 Motion_Blur, bool AO, bool AA);
	void Initiate();
	void InpActEvt_AnyKey_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void Invite_Accepted(bool bWasSuccessful, int32 LocalPlayerNum, const class FString& InvitedBy, const struct FBlueprintSessionResult& Session);
	void Quit_Session_by_Force(bool Client_Only);
	void ReceiveBeginPlay();
	void ReceivePossess(class APawn* PossessedPawn);
	void Save_To_Slot();
	void Set_Antialiasing(bool Value);
	void Set_Bloom_Quality(int32 Value);
	void Set_DOF_Quality(int32 Value);
	void Set_Fog_Quality(int32 Value);
	void Set_FPS_Cap(int32 Value);
	void Set_Global_Volume(int32 Value);
	void Set_Indirect(bool On);
	void Set_Mic_Gate(int32 Value);
	void Set_Mic_Volume(int32 Value);
	void Set_MotionBlur(int32 Value);
	void Set_Reflections(int32 Value);
	void Set_Reflex(int32 Value);
	void Set_RenderScale(int32 Value);
	void Set_Resolution(int32 Value);
	void Set_Screen_Mode(EWindowMode Mode);
	void Set_VSync(int32 Value);
	void Set_World_Volume(bool TRUE_0);
	void Volume_Transition__FinishedFunc();
	void Volume_Transition__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PC_C">();
	}
	static class APC_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APC_C>();
	}
};
static_assert(alignof(APC_C) == 0x000008, "Wrong alignment on APC_C");
static_assert(sizeof(APC_C) == 0x000AB0, "Wrong size on APC_C");
static_assert(offsetof(APC_C, UberGraphFrame) == 0x000858, "Member 'APC_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APC_C, Volume_Transition_NewTrack_0_13C24D3344B680374D2A67BE80DB5354) == 0x000860, "Member 'APC_C::Volume_Transition_NewTrack_0_13C24D3344B680374D2A67BE80DB5354' has a wrong offset!");
static_assert(offsetof(APC_C, Volume_Transition__Direction_13C24D3344B680374D2A67BE80DB5354) == 0x000864, "Member 'APC_C::Volume_Transition__Direction_13C24D3344B680374D2A67BE80DB5354' has a wrong offset!");
static_assert(offsetof(APC_C, Volume_Transition) == 0x000868, "Member 'APC_C::Volume_Transition' has a wrong offset!");
static_assert(offsetof(APC_C, GI_Ref) == 0x000870, "Member 'APC_C::GI_Ref' has a wrong offset!");
static_assert(offsetof(APC_C, Current_Session) == 0x000878, "Member 'APC_C::Current_Session' has a wrong offset!");
static_assert(offsetof(APC_C, GM_Ref) == 0x000998, "Member 'APC_C::GM_Ref' has a wrong offset!");
static_assert(offsetof(APC_C, Mec_Ref) == 0x0009A0, "Member 'APC_C::Mec_Ref' has a wrong offset!");
static_assert(offsetof(APC_C, Menu_Open) == 0x0009A8, "Member 'APC_C::Menu_Open' has a wrong offset!");
static_assert(offsetof(APC_C, Camera_Sensitivity) == 0x0009B0, "Member 'APC_C::Camera_Sensitivity' has a wrong offset!");
static_assert(offsetof(APC_C, Graphic_AO) == 0x0009B8, "Member 'APC_C::Graphic_AO' has a wrong offset!");
static_assert(offsetof(APC_C, Graphic_ScreenMode) == 0x0009B9, "Member 'APC_C::Graphic_ScreenMode' has a wrong offset!");
static_assert(offsetof(APC_C, Graphic_Fog) == 0x0009BC, "Member 'APC_C::Graphic_Fog' has a wrong offset!");
static_assert(offsetof(APC_C, Graphic_Reflex) == 0x0009C0, "Member 'APC_C::Graphic_Reflex' has a wrong offset!");
static_assert(offsetof(APC_C, Graphic_Vsync) == 0x0009C4, "Member 'APC_C::Graphic_Vsync' has a wrong offset!");
static_assert(offsetof(APC_C, Graphic_RenderScale) == 0x0009C8, "Member 'APC_C::Graphic_RenderScale' has a wrong offset!");
static_assert(offsetof(APC_C, Graphic_DOF) == 0x0009CC, "Member 'APC_C::Graphic_DOF' has a wrong offset!");
static_assert(offsetof(APC_C, Graphic_Bloom) == 0x0009D0, "Member 'APC_C::Graphic_Bloom' has a wrong offset!");
static_assert(offsetof(APC_C, Press_Any_Key) == 0x0009D8, "Member 'APC_C::Press_Any_Key' has a wrong offset!");
static_assert(offsetof(APC_C, Default_Walk) == 0x0009E8, "Member 'APC_C::Default_Walk' has a wrong offset!");
static_assert(offsetof(APC_C, Default_Talk) == 0x0009E9, "Member 'APC_C::Default_Talk' has a wrong offset!");
static_assert(offsetof(APC_C, Invert_H) == 0x0009EA, "Member 'APC_C::Invert_H' has a wrong offset!");
static_assert(offsetof(APC_C, Invert_V) == 0x0009EB, "Member 'APC_C::Invert_V' has a wrong offset!");
static_assert(offsetof(APC_C, FPS_Cap) == 0x0009EC, "Member 'APC_C::FPS_Cap' has a wrong offset!");
static_assert(offsetof(APC_C, Graphic_Motion) == 0x0009F0, "Member 'APC_C::Graphic_Motion' has a wrong offset!");
static_assert(offsetof(APC_C, Mic_Gate) == 0x0009F4, "Member 'APC_C::Mic_Gate' has a wrong offset!");
static_assert(offsetof(APC_C, Mic_Volume) == 0x0009F8, "Member 'APC_C::Mic_Volume' has a wrong offset!");
static_assert(offsetof(APC_C, AntiAliasing) == 0x0009FC, "Member 'APC_C::AntiAliasing' has a wrong offset!");
static_assert(offsetof(APC_C, Reflections) == 0x000A00, "Member 'APC_C::Reflections' has a wrong offset!");
static_assert(offsetof(APC_C, SelectedResolution) == 0x000A04, "Member 'APC_C::SelectedResolution' has a wrong offset!");
static_assert(offsetof(APC_C, Save_Settings) == 0x000A08, "Member 'APC_C::Save_Settings' has a wrong offset!");
static_assert(offsetof(APC_C, DefaultInputs) == 0x000A10, "Member 'APC_C::DefaultInputs' has a wrong offset!");
static_assert(offsetof(APC_C, MainSubmix_Ref) == 0x000A18, "Member 'APC_C::MainSubmix_Ref' has a wrong offset!");
static_assert(offsetof(APC_C, Overlay_HUD) == 0x000A20, "Member 'APC_C::Overlay_HUD' has a wrong offset!");
static_assert(offsetof(APC_C, Lauching) == 0x000A28, "Member 'APC_C::Lauching' has a wrong offset!");
static_assert(offsetof(APC_C, World_Mixer) == 0x000A30, "Member 'APC_C::World_Mixer' has a wrong offset!");
static_assert(offsetof(APC_C, Stick_Sensitivity) == 0x000A38, "Member 'APC_C::Stick_Sensitivity' has a wrong offset!");
static_assert(offsetof(APC_C, Stick_Min_Zone) == 0x000A40, "Member 'APC_C::Stick_Min_Zone' has a wrong offset!");
static_assert(offsetof(APC_C, Stick_Max_Zone) == 0x000A48, "Member 'APC_C::Stick_Max_Zone' has a wrong offset!");
static_assert(offsetof(APC_C, Stick_Linearity) == 0x000A50, "Member 'APC_C::Stick_Linearity' has a wrong offset!");
static_assert(offsetof(APC_C, Stick_Boost) == 0x000A58, "Member 'APC_C::Stick_Boost' has a wrong offset!");
static_assert(offsetof(APC_C, Invert_H_G) == 0x000A60, "Member 'APC_C::Invert_H_G' has a wrong offset!");
static_assert(offsetof(APC_C, Invert_V_G) == 0x000A61, "Member 'APC_C::Invert_V_G' has a wrong offset!");
static_assert(offsetof(APC_C, Stick_Ratio) == 0x000A68, "Member 'APC_C::Stick_Ratio' has a wrong offset!");
static_assert(offsetof(APC_C, Stick_Walk) == 0x000A70, "Member 'APC_C::Stick_Walk' has a wrong offset!");
static_assert(offsetof(APC_C, Stick_Run) == 0x000A78, "Member 'APC_C::Stick_Run' has a wrong offset!");
static_assert(offsetof(APC_C, Use_Gamepad) == 0x000A80, "Member 'APC_C::Use_Gamepad' has a wrong offset!");
static_assert(offsetof(APC_C, Set_Active_Trigger) == 0x000A88, "Member 'APC_C::Set_Active_Trigger' has a wrong offset!");
static_assert(offsetof(APC_C, Trigger_Activation) == 0x000A98, "Member 'APC_C::Trigger_Activation' has a wrong offset!");
static_assert(offsetof(APC_C, Last_Resolution) == 0x000AA0, "Member 'APC_C::Last_Resolution' has a wrong offset!");
static_assert(offsetof(APC_C, AudioClamp_Ref) == 0x000AA8, "Member 'APC_C::AudioClamp_Ref' has a wrong offset!");

}

