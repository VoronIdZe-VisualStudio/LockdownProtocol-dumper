#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundSource

#include "Basic.hpp"

#include "Enum_PathLevel_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SoundSource.SoundSource_C
// 0x0100 (0x03A8 - 0x02A8)
class ASoundSource_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Metasound;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Source;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TL_Shut_Sound_Volume_FA59DF88452CB2A69DB086A76BCE5B0E; // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_Shut_Sound__Direction_FA59DF88452CB2A69DB086A76BCE5B0E; // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_Shut_Sound;                                     // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         TL_Rise_Sound_Volume_7DCCD3D24B09B49CC6BAF196035DFF2B; // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TL_Rise_Sound__Direction_7DCCD3D24B09B49CC6BAF196035DFF2B; // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TL_Rise_Sound;                                     // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AMec_C*                                 Mec_Ref;                                           // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Target_Direction;                                  // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_Distance;                                   // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Attenuation;                                       // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash)
	float                                         Volume;                                            // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound;                                             // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Pitch;                                             // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoPlay;                                          // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Path;                                              // 0x031E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x031F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_Deviation;                                  // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Deviation_Ratio;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Falloff_Distance;                                  // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Restart_on_Join;                                   // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Last_Location;                                     // 0x0338(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Direction;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Path_Deviation;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Text_Color;                                        // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta;                                             // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Distance_Factor;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Direct_Path;                                       // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_PathLevel                                Path_Level;                                        // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundEffectSourcePresetChain*          Effect;                                            // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              Restarted;                                         // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        Auto_Destroy;                                      // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void Stop();
	void Set_Effect(class USoundEffectSourcePresetChain* Effect_0);
	void Set_Path_Level(Enum_PathLevel Path_Level_0);
	void Trigger2(class FName Name_0, bool TRUE_0);
	void Play_Impact(float Volume_0, float Pitch_0, class USoundWave* Wave);
	void Play(float StartTime);
	void Set_Sound(class USoundBase* Sound_0);
	void Set_Attenuation(class USoundAttenuation* Attenuation_0);
	void Trigger(class FName Name_0);
	void Set_Volume(float Volume_0);
	void Set_Pitch(float Pitch_0);
	void Set_Float(class FName Input, float Value);
	void UserConstructionScript();
	void TL_Shut_Sound__FinishedFunc();
	void TL_Shut_Sound__UpdateFunc();
	void TL_Rise_Sound__FinishedFunc();
	void TL_Rise_Sound__UpdateFunc();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Activate(bool TRUE_0, float StartTime);
	void Force_Active(bool TRUE_0);
	void Restart();
	void BndEvt__SoundSource_MetaSound_K2Node_ComponentBoundEvent_0_OnAudioVirtualizationChanged__DelegateSignature(bool bIsVirtualized);
	void ExecuteUbergraph_SoundSource(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SoundSource_C">();
	}
	static class ASoundSource_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASoundSource_C>();
	}
};
static_assert(alignof(ASoundSource_C) == 0x000008, "Wrong alignment on ASoundSource_C");
static_assert(sizeof(ASoundSource_C) == 0x0003A8, "Wrong size on ASoundSource_C");
static_assert(offsetof(ASoundSource_C, UberGraphFrame) == 0x0002A8, "Member 'ASoundSource_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Metasound) == 0x0002B0, "Member 'ASoundSource_C::Metasound' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Source) == 0x0002B8, "Member 'ASoundSource_C::Source' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Root) == 0x0002C0, "Member 'ASoundSource_C::Root' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, TL_Shut_Sound_Volume_FA59DF88452CB2A69DB086A76BCE5B0E) == 0x0002C8, "Member 'ASoundSource_C::TL_Shut_Sound_Volume_FA59DF88452CB2A69DB086A76BCE5B0E' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, TL_Shut_Sound__Direction_FA59DF88452CB2A69DB086A76BCE5B0E) == 0x0002CC, "Member 'ASoundSource_C::TL_Shut_Sound__Direction_FA59DF88452CB2A69DB086A76BCE5B0E' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, TL_Shut_Sound) == 0x0002D0, "Member 'ASoundSource_C::TL_Shut_Sound' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, TL_Rise_Sound_Volume_7DCCD3D24B09B49CC6BAF196035DFF2B) == 0x0002D8, "Member 'ASoundSource_C::TL_Rise_Sound_Volume_7DCCD3D24B09B49CC6BAF196035DFF2B' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, TL_Rise_Sound__Direction_7DCCD3D24B09B49CC6BAF196035DFF2B) == 0x0002DC, "Member 'ASoundSource_C::TL_Rise_Sound__Direction_7DCCD3D24B09B49CC6BAF196035DFF2B' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, TL_Rise_Sound) == 0x0002E0, "Member 'ASoundSource_C::TL_Rise_Sound' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Mec_Ref) == 0x0002E8, "Member 'ASoundSource_C::Mec_Ref' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Target_Direction) == 0x0002F0, "Member 'ASoundSource_C::Target_Direction' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Target_Distance) == 0x0002F8, "Member 'ASoundSource_C::Target_Distance' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Attenuation) == 0x000300, "Member 'ASoundSource_C::Attenuation' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Volume) == 0x000308, "Member 'ASoundSource_C::Volume' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Sound) == 0x000310, "Member 'ASoundSource_C::Sound' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Pitch) == 0x000318, "Member 'ASoundSource_C::Pitch' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Active) == 0x00031C, "Member 'ASoundSource_C::Active' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, AutoPlay) == 0x00031D, "Member 'ASoundSource_C::AutoPlay' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Path) == 0x00031E, "Member 'ASoundSource_C::Path' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Debug) == 0x00031F, "Member 'ASoundSource_C::Debug' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Target_Deviation) == 0x000320, "Member 'ASoundSource_C::Target_Deviation' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Deviation_Ratio) == 0x000328, "Member 'ASoundSource_C::Deviation_Ratio' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Falloff_Distance) == 0x000330, "Member 'ASoundSource_C::Falloff_Distance' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Restart_on_Join) == 0x000334, "Member 'ASoundSource_C::Restart_on_Join' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Last_Location) == 0x000338, "Member 'ASoundSource_C::Last_Location' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Last_Direction) == 0x000350, "Member 'ASoundSource_C::Last_Direction' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Path_Deviation) == 0x000358, "Member 'ASoundSource_C::Path_Deviation' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Text_Color) == 0x000360, "Member 'ASoundSource_C::Text_Color' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Delta) == 0x000370, "Member 'ASoundSource_C::Delta' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Distance_Factor) == 0x000378, "Member 'ASoundSource_C::Distance_Factor' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Direct_Path) == 0x000380, "Member 'ASoundSource_C::Direct_Path' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Path_Level) == 0x000381, "Member 'ASoundSource_C::Path_Level' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Effect) == 0x000388, "Member 'ASoundSource_C::Effect' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Restarted) == 0x000390, "Member 'ASoundSource_C::Restarted' has a wrong offset!");
static_assert(offsetof(ASoundSource_C, Auto_Destroy) == 0x0003A0, "Member 'ASoundSource_C::Auto_Destroy' has a wrong offset!");

}

