#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundPath

#include "Basic.hpp"

#include "Enum_PathLevel_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SoundPath.SoundPath_C
// 0x0118 (0x03C0 - 0x02A8)
class ASoundPath_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Source;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AMec_C*                                 Mec_Ref;                                           // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Target_Direction;                              // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Old_Target_Distance;                               // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Path;                                           // 0x02D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x02D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D6[0x2];                                      // 0x02D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Old_Target_Deviation;                              // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Deviation_Ratio;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Falloff_Distance;                                  // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Old_Last_Location;                                 // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Last_Direction;                                // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Path_Deviation;                                // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Text_Color;                                        // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta;                                             // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Distance_Factor;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Direct_Path;                                       // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_PathLevel                                Path_Level;                                        // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Restarted;                                         // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        Auto_Destroy;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                Last_Corner_Location;                              // 0x0358(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Path_Timer;                                        // 0x0370(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Distance;                                      // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationPath*                        Path;                                              // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Hear_Distance;                                     // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          In_Path;                                           // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Travel_Corner;                                     // 0x0398(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Travel_Distance;                                   // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Travel_Angle;                                      // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Far;                                               // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Get_Travel_Datas_Save(struct FVector* Corner, float* Distance, float* Angle);
	void Get_Travel_Datas_on_PathTick(struct FVector* Corner, float* Distance, float* Angle);
	void Get_Path(double* Distance, struct FVector* Location);
	void Get_Travel_Datas(struct FVector* Corner, float* Distance, float* Angle);
	void Old_Set_Path_Level(Enum_PathLevel Path_Level_0);
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Path_Tick();
	void Set_Path_Level(Enum_PathLevel Level);
	void Start_Path_Tick(float Time);
	void Stop_Path_Tick();
	void ExecuteUbergraph_SoundPath(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SoundPath_C">();
	}
	static class ASoundPath_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASoundPath_C>();
	}
};
static_assert(alignof(ASoundPath_C) == 0x000008, "Wrong alignment on ASoundPath_C");
static_assert(sizeof(ASoundPath_C) == 0x0003C0, "Wrong size on ASoundPath_C");
static_assert(offsetof(ASoundPath_C, UberGraphFrame) == 0x0002A8, "Member 'ASoundPath_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Source) == 0x0002B0, "Member 'ASoundPath_C::Source' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Root) == 0x0002B8, "Member 'ASoundPath_C::Root' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Mec_Ref) == 0x0002C0, "Member 'ASoundPath_C::Mec_Ref' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Old_Target_Direction) == 0x0002C8, "Member 'ASoundPath_C::Old_Target_Direction' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Old_Target_Distance) == 0x0002D0, "Member 'ASoundPath_C::Old_Target_Distance' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Is_Path) == 0x0002D4, "Member 'ASoundPath_C::Is_Path' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Debug) == 0x0002D5, "Member 'ASoundPath_C::Debug' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Old_Target_Deviation) == 0x0002D8, "Member 'ASoundPath_C::Old_Target_Deviation' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Deviation_Ratio) == 0x0002E0, "Member 'ASoundPath_C::Deviation_Ratio' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Falloff_Distance) == 0x0002E8, "Member 'ASoundPath_C::Falloff_Distance' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Old_Last_Location) == 0x0002F0, "Member 'ASoundPath_C::Old_Last_Location' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Old_Last_Direction) == 0x000308, "Member 'ASoundPath_C::Old_Last_Direction' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Old_Path_Deviation) == 0x000310, "Member 'ASoundPath_C::Old_Path_Deviation' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Text_Color) == 0x000318, "Member 'ASoundPath_C::Text_Color' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Delta) == 0x000328, "Member 'ASoundPath_C::Delta' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Distance_Factor) == 0x000330, "Member 'ASoundPath_C::Distance_Factor' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Direct_Path) == 0x000338, "Member 'ASoundPath_C::Direct_Path' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Path_Level) == 0x000339, "Member 'ASoundPath_C::Path_Level' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Restarted) == 0x000340, "Member 'ASoundPath_C::Restarted' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Auto_Destroy) == 0x000350, "Member 'ASoundPath_C::Auto_Destroy' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Last_Corner_Location) == 0x000358, "Member 'ASoundPath_C::Last_Corner_Location' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Path_Timer) == 0x000370, "Member 'ASoundPath_C::Path_Timer' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Max_Distance) == 0x000378, "Member 'ASoundPath_C::Max_Distance' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Path) == 0x000380, "Member 'ASoundPath_C::Path' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Hear_Distance) == 0x000388, "Member 'ASoundPath_C::Hear_Distance' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, In_Path) == 0x000390, "Member 'ASoundPath_C::In_Path' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Travel_Corner) == 0x000398, "Member 'ASoundPath_C::Travel_Corner' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Travel_Distance) == 0x0003B0, "Member 'ASoundPath_C::Travel_Distance' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Travel_Angle) == 0x0003B4, "Member 'ASoundPath_C::Travel_Angle' has a wrong offset!");
static_assert(offsetof(ASoundPath_C, Far) == 0x0003B8, "Member 'ASoundPath_C::Far' has a wrong offset!");

}

