#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeDataTable

#include "Basic.hpp"

#include "RuntimeDataTable_structs.hpp"
#include "EasyCsv_structs.hpp"


namespace SDK::Params
{

// Function RuntimeDataTable.RuntimeDataTableWebToken.Init
// 0x0018 (0x0018 - 0x0000)
struct RuntimeDataTableWebToken_Init final
{
public:
	class FString                                 InTokenText;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsUntilExpiration;                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeDataTableWebToken_Init) == 0x000008, "Wrong alignment on RuntimeDataTableWebToken_Init");
static_assert(sizeof(RuntimeDataTableWebToken_Init) == 0x000018, "Wrong size on RuntimeDataTableWebToken_Init");
static_assert(offsetof(RuntimeDataTableWebToken_Init, InTokenText) == 0x000000, "Member 'RuntimeDataTableWebToken_Init::InTokenText' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableWebToken_Init, SecondsUntilExpiration) == 0x000010, "Member 'RuntimeDataTableWebToken_Init::SecondsUntilExpiration' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableWebToken_Init, ReturnValue) == 0x000014, "Member 'RuntimeDataTableWebToken_Init::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableWebToken.GetNumberOfSecondsUntilExpiration
// 0x0004 (0x0004 - 0x0000)
struct RuntimeDataTableWebToken_GetNumberOfSecondsUntilExpiration final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableWebToken_GetNumberOfSecondsUntilExpiration) == 0x000004, "Wrong alignment on RuntimeDataTableWebToken_GetNumberOfSecondsUntilExpiration");
static_assert(sizeof(RuntimeDataTableWebToken_GetNumberOfSecondsUntilExpiration) == 0x000004, "Wrong size on RuntimeDataTableWebToken_GetNumberOfSecondsUntilExpiration");
static_assert(offsetof(RuntimeDataTableWebToken_GetNumberOfSecondsUntilExpiration, ReturnValue) == 0x000000, "Member 'RuntimeDataTableWebToken_GetNumberOfSecondsUntilExpiration::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableWebToken.GetTokenText
// 0x0010 (0x0010 - 0x0000)
struct RuntimeDataTableWebToken_GetTokenText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableWebToken_GetTokenText) == 0x000008, "Wrong alignment on RuntimeDataTableWebToken_GetTokenText");
static_assert(sizeof(RuntimeDataTableWebToken_GetTokenText) == 0x000010, "Wrong size on RuntimeDataTableWebToken_GetTokenText");
static_assert(offsetof(RuntimeDataTableWebToken_GetTokenText, ReturnValue) == 0x000000, "Member 'RuntimeDataTableWebToken_GetTokenText::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableWebToken.HasTokenExpired
// 0x0001 (0x0001 - 0x0000)
struct RuntimeDataTableWebToken_HasTokenExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableWebToken_HasTokenExpired) == 0x000001, "Wrong alignment on RuntimeDataTableWebToken_HasTokenExpired");
static_assert(sizeof(RuntimeDataTableWebToken_HasTokenExpired) == 0x000001, "Wrong size on RuntimeDataTableWebToken_HasTokenExpired");
static_assert(offsetof(RuntimeDataTableWebToken_HasTokenExpired, ReturnValue) == 0x000000, "Member 'RuntimeDataTableWebToken_HasTokenExpired::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.AutoGenerateKeys
// 0x0010 (0x0010 - 0x0000)
struct RuntimeDataTableObject_AutoGenerateKeys final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_AutoGenerateKeys) == 0x000008, "Wrong alignment on RuntimeDataTableObject_AutoGenerateKeys");
static_assert(sizeof(RuntimeDataTableObject_AutoGenerateKeys) == 0x000010, "Wrong size on RuntimeDataTableObject_AutoGenerateKeys");
static_assert(offsetof(RuntimeDataTableObject_AutoGenerateKeys, ReturnValue) == 0x000000, "Member 'RuntimeDataTableObject_AutoGenerateKeys::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.BuildGoogleSheetDownloadLinkAndGetAsCsv
// 0x0080 (0x0080 - 0x0000)
struct RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv final
{
public:
	struct FRuntimeDataTableTokenInfo             InTokenInfo;                                       // 0x0000(0x0048)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FRuntimeDataTableOperationParams       OperationParams;                                   // 0x0048(0x000C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRuntimeDataTableCallbackInfo& CallbackInfo)> CallOnComplete;        // 0x0054(0x0010)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InSheetURL;                                        // 0x0068(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSheetIsPublic;                                    // 0x0078(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv) == 0x000008, "Wrong alignment on RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv");
static_assert(sizeof(RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv) == 0x000080, "Wrong size on RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv");
static_assert(offsetof(RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv, InTokenInfo) == 0x000000, "Member 'RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv::InTokenInfo' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv, OperationParams) == 0x000048, "Member 'RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv::OperationParams' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv, CallOnComplete) == 0x000054, "Member 'RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv::CallOnComplete' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv, InSheetURL) == 0x000068, "Member 'RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv::InSheetURL' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv, bSheetIsPublic) == 0x000078, "Member 'RuntimeDataTableObject_BuildGoogleSheetDownloadLinkAndGetAsCsv::bSheetIsPublic' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GenerateCsvFromArray
// 0x0050 (0x0050 - 0x0000)
struct RuntimeDataTableObject_GenerateCsvFromArray final
{
public:
	TArray<int32>                                 ArrayToExport;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 OutCSV_String;                                     // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Keys;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 MembersToInclude;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSortColumnsAlphanumerically;                      // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          OwningObject;                                      // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_GenerateCsvFromArray) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GenerateCsvFromArray");
static_assert(sizeof(RuntimeDataTableObject_GenerateCsvFromArray) == 0x000050, "Wrong size on RuntimeDataTableObject_GenerateCsvFromArray");
static_assert(offsetof(RuntimeDataTableObject_GenerateCsvFromArray, ArrayToExport) == 0x000000, "Member 'RuntimeDataTableObject_GenerateCsvFromArray::ArrayToExport' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateCsvFromArray, OutCSV_String) == 0x000010, "Member 'RuntimeDataTableObject_GenerateCsvFromArray::OutCSV_String' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateCsvFromArray, Keys) == 0x000020, "Member 'RuntimeDataTableObject_GenerateCsvFromArray::Keys' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateCsvFromArray, MembersToInclude) == 0x000030, "Member 'RuntimeDataTableObject_GenerateCsvFromArray::MembersToInclude' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateCsvFromArray, bSortColumnsAlphanumerically) == 0x000040, "Member 'RuntimeDataTableObject_GenerateCsvFromArray::bSortColumnsAlphanumerically' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateCsvFromArray, OwningObject) == 0x000048, "Member 'RuntimeDataTableObject_GenerateCsvFromArray::OwningObject' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GenerateTokenInfoFromFile
// 0x0060 (0x0060 - 0x0000)
struct RuntimeDataTableObject_GenerateTokenInfoFromFile final
{
public:
	struct FRuntimeDataTableTokenInfo             OutTokenInfo;                                      // 0x0000(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 InPathToFile;                                      // 0x0048(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredSecondsUntilExpiration;                     // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeDataTableObject_GenerateTokenInfoFromFile) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GenerateTokenInfoFromFile");
static_assert(sizeof(RuntimeDataTableObject_GenerateTokenInfoFromFile) == 0x000060, "Wrong size on RuntimeDataTableObject_GenerateTokenInfoFromFile");
static_assert(offsetof(RuntimeDataTableObject_GenerateTokenInfoFromFile, OutTokenInfo) == 0x000000, "Member 'RuntimeDataTableObject_GenerateTokenInfoFromFile::OutTokenInfo' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateTokenInfoFromFile, InPathToFile) == 0x000048, "Member 'RuntimeDataTableObject_GenerateTokenInfoFromFile::InPathToFile' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateTokenInfoFromFile, DesiredSecondsUntilExpiration) == 0x000058, "Member 'RuntimeDataTableObject_GenerateTokenInfoFromFile::DesiredSecondsUntilExpiration' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateTokenInfoFromFile, ReturnValue) == 0x00005C, "Member 'RuntimeDataTableObject_GenerateTokenInfoFromFile::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GenerateTokenInfoFromString
// 0x0060 (0x0060 - 0x0000)
struct RuntimeDataTableObject_GenerateTokenInfoFromString final
{
public:
	struct FRuntimeDataTableTokenInfo             OutTokenInfo;                                      // 0x0000(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 InJsonString;                                      // 0x0048(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesiredSecondsUntilExpiration;                     // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeDataTableObject_GenerateTokenInfoFromString) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GenerateTokenInfoFromString");
static_assert(sizeof(RuntimeDataTableObject_GenerateTokenInfoFromString) == 0x000060, "Wrong size on RuntimeDataTableObject_GenerateTokenInfoFromString");
static_assert(offsetof(RuntimeDataTableObject_GenerateTokenInfoFromString, OutTokenInfo) == 0x000000, "Member 'RuntimeDataTableObject_GenerateTokenInfoFromString::OutTokenInfo' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateTokenInfoFromString, InJsonString) == 0x000048, "Member 'RuntimeDataTableObject_GenerateTokenInfoFromString::InJsonString' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateTokenInfoFromString, DesiredSecondsUntilExpiration) == 0x000058, "Member 'RuntimeDataTableObject_GenerateTokenInfoFromString::DesiredSecondsUntilExpiration' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GenerateTokenInfoFromString, ReturnValue) == 0x00005C, "Member 'RuntimeDataTableObject_GenerateTokenInfoFromString::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GetAllObjectVariableNames
// 0x0030 (0x0030 - 0x0000)
struct RuntimeDataTableObject_GetAllObjectVariableNames final
{
public:
	const class UObject*                          Object;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeOnlyConfigVariables;                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeInheritedVariables;                        // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MemberBlacklist;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_GetAllObjectVariableNames) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GetAllObjectVariableNames");
static_assert(sizeof(RuntimeDataTableObject_GetAllObjectVariableNames) == 0x000030, "Wrong size on RuntimeDataTableObject_GetAllObjectVariableNames");
static_assert(offsetof(RuntimeDataTableObject_GetAllObjectVariableNames, Object) == 0x000000, "Member 'RuntimeDataTableObject_GetAllObjectVariableNames::Object' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GetAllObjectVariableNames, bIncludeOnlyConfigVariables) == 0x000008, "Member 'RuntimeDataTableObject_GetAllObjectVariableNames::bIncludeOnlyConfigVariables' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GetAllObjectVariableNames, bIncludeInheritedVariables) == 0x000009, "Member 'RuntimeDataTableObject_GetAllObjectVariableNames::bIncludeInheritedVariables' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GetAllObjectVariableNames, MemberBlacklist) == 0x000010, "Member 'RuntimeDataTableObject_GetAllObjectVariableNames::MemberBlacklist' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GetAllObjectVariableNames, ReturnValue) == 0x000020, "Member 'RuntimeDataTableObject_GetAllObjectVariableNames::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GetGoogleSheetsApiUrlPrefix
// 0x0010 (0x0010 - 0x0000)
struct RuntimeDataTableObject_GetGoogleSheetsApiUrlPrefix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_GetGoogleSheetsApiUrlPrefix) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GetGoogleSheetsApiUrlPrefix");
static_assert(sizeof(RuntimeDataTableObject_GetGoogleSheetsApiUrlPrefix) == 0x000010, "Wrong size on RuntimeDataTableObject_GetGoogleSheetsApiUrlPrefix");
static_assert(offsetof(RuntimeDataTableObject_GetGoogleSheetsApiUrlPrefix, ReturnValue) == 0x000000, "Member 'RuntimeDataTableObject_GetGoogleSheetsApiUrlPrefix::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GetGoogleSheetsBatchUpdateURL
// 0x0020 (0x0020 - 0x0000)
struct RuntimeDataTableObject_GetGoogleSheetsBatchUpdateURL final
{
public:
	class FString                                 InSpreadsheetId;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_GetGoogleSheetsBatchUpdateURL) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GetGoogleSheetsBatchUpdateURL");
static_assert(sizeof(RuntimeDataTableObject_GetGoogleSheetsBatchUpdateURL) == 0x000020, "Wrong size on RuntimeDataTableObject_GetGoogleSheetsBatchUpdateURL");
static_assert(offsetof(RuntimeDataTableObject_GetGoogleSheetsBatchUpdateURL, InSpreadsheetId) == 0x000000, "Member 'RuntimeDataTableObject_GetGoogleSheetsBatchUpdateURL::InSpreadsheetId' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GetGoogleSheetsBatchUpdateURL, ReturnValue) == 0x000010, "Member 'RuntimeDataTableObject_GetGoogleSheetsBatchUpdateURL::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GetGoogleSheetsUrlPrefix
// 0x0010 (0x0010 - 0x0000)
struct RuntimeDataTableObject_GetGoogleSheetsUrlPrefix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_GetGoogleSheetsUrlPrefix) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GetGoogleSheetsUrlPrefix");
static_assert(sizeof(RuntimeDataTableObject_GetGoogleSheetsUrlPrefix) == 0x000010, "Wrong size on RuntimeDataTableObject_GetGoogleSheetsUrlPrefix");
static_assert(offsetof(RuntimeDataTableObject_GetGoogleSheetsUrlPrefix, ReturnValue) == 0x000000, "Member 'RuntimeDataTableObject_GetGoogleSheetsUrlPrefix::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GetGoogleSheetsValuesBatchUpdateURL
// 0x0020 (0x0020 - 0x0000)
struct RuntimeDataTableObject_GetGoogleSheetsValuesBatchUpdateURL final
{
public:
	class FString                                 InSpreadsheetId;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_GetGoogleSheetsValuesBatchUpdateURL) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GetGoogleSheetsValuesBatchUpdateURL");
static_assert(sizeof(RuntimeDataTableObject_GetGoogleSheetsValuesBatchUpdateURL) == 0x000020, "Wrong size on RuntimeDataTableObject_GetGoogleSheetsValuesBatchUpdateURL");
static_assert(offsetof(RuntimeDataTableObject_GetGoogleSheetsValuesBatchUpdateURL, InSpreadsheetId) == 0x000000, "Member 'RuntimeDataTableObject_GetGoogleSheetsValuesBatchUpdateURL::InSpreadsheetId' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GetGoogleSheetsValuesBatchUpdateURL, ReturnValue) == 0x000010, "Member 'RuntimeDataTableObject_GetGoogleSheetsValuesBatchUpdateURL::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GetMimeCsv
// 0x0010 (0x0010 - 0x0000)
struct RuntimeDataTableObject_GetMimeCsv final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_GetMimeCsv) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GetMimeCsv");
static_assert(sizeof(RuntimeDataTableObject_GetMimeCsv) == 0x000010, "Wrong size on RuntimeDataTableObject_GetMimeCsv");
static_assert(offsetof(RuntimeDataTableObject_GetMimeCsv, ReturnValue) == 0x000000, "Member 'RuntimeDataTableObject_GetMimeCsv::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GetSheetIdFromUrl
// 0x0020 (0x0020 - 0x0000)
struct RuntimeDataTableObject_GetSheetIdFromUrl final
{
public:
	class FString                                 SheetURL;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_GetSheetIdFromUrl) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GetSheetIdFromUrl");
static_assert(sizeof(RuntimeDataTableObject_GetSheetIdFromUrl) == 0x000020, "Wrong size on RuntimeDataTableObject_GetSheetIdFromUrl");
static_assert(offsetof(RuntimeDataTableObject_GetSheetIdFromUrl, SheetURL) == 0x000000, "Member 'RuntimeDataTableObject_GetSheetIdFromUrl::SheetURL' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GetSheetIdFromUrl, ReturnValue) == 0x000010, "Member 'RuntimeDataTableObject_GetSheetIdFromUrl::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GetSheetIdFromUrl_Int
// 0x0018 (0x0018 - 0x0000)
struct RuntimeDataTableObject_GetSheetIdFromUrl_Int final
{
public:
	class FString                                 SheetURL;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeDataTableObject_GetSheetIdFromUrl_Int) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GetSheetIdFromUrl_Int");
static_assert(sizeof(RuntimeDataTableObject_GetSheetIdFromUrl_Int) == 0x000018, "Wrong size on RuntimeDataTableObject_GetSheetIdFromUrl_Int");
static_assert(offsetof(RuntimeDataTableObject_GetSheetIdFromUrl_Int, SheetURL) == 0x000000, "Member 'RuntimeDataTableObject_GetSheetIdFromUrl_Int::SheetURL' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GetSheetIdFromUrl_Int, ReturnValue) == 0x000010, "Member 'RuntimeDataTableObject_GetSheetIdFromUrl_Int::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.GetSpreadsheetIdFromUrl
// 0x0020 (0x0020 - 0x0000)
struct RuntimeDataTableObject_GetSpreadsheetIdFromUrl final
{
public:
	class FString                                 SheetURL;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_GetSpreadsheetIdFromUrl) == 0x000008, "Wrong alignment on RuntimeDataTableObject_GetSpreadsheetIdFromUrl");
static_assert(sizeof(RuntimeDataTableObject_GetSpreadsheetIdFromUrl) == 0x000020, "Wrong size on RuntimeDataTableObject_GetSpreadsheetIdFromUrl");
static_assert(offsetof(RuntimeDataTableObject_GetSpreadsheetIdFromUrl, SheetURL) == 0x000000, "Member 'RuntimeDataTableObject_GetSpreadsheetIdFromUrl::SheetURL' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_GetSpreadsheetIdFromUrl, ReturnValue) == 0x000010, "Member 'RuntimeDataTableObject_GetSpreadsheetIdFromUrl::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.UpdateArrayFromCsvInfo
// 0x0098 (0x0098 - 0x0000)
struct RuntimeDataTableObject_UpdateArrayFromCsvInfo final
{
public:
	TArray<int32>                                 ArrayToUpdate;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Successful;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEasyCsvInfo                           CSVInfo;                                           // 0x0018(0x0070)(Parm, NativeAccessSpecifierPublic)
	bool                                          MatchStructMemberNames;                            // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          OwningObject;                                      // 0x0090(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_UpdateArrayFromCsvInfo) == 0x000008, "Wrong alignment on RuntimeDataTableObject_UpdateArrayFromCsvInfo");
static_assert(sizeof(RuntimeDataTableObject_UpdateArrayFromCsvInfo) == 0x000098, "Wrong size on RuntimeDataTableObject_UpdateArrayFromCsvInfo");
static_assert(offsetof(RuntimeDataTableObject_UpdateArrayFromCsvInfo, ArrayToUpdate) == 0x000000, "Member 'RuntimeDataTableObject_UpdateArrayFromCsvInfo::ArrayToUpdate' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_UpdateArrayFromCsvInfo, Successful) == 0x000010, "Member 'RuntimeDataTableObject_UpdateArrayFromCsvInfo::Successful' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_UpdateArrayFromCsvInfo, CSVInfo) == 0x000018, "Member 'RuntimeDataTableObject_UpdateArrayFromCsvInfo::CSVInfo' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_UpdateArrayFromCsvInfo, MatchStructMemberNames) == 0x000088, "Member 'RuntimeDataTableObject_UpdateArrayFromCsvInfo::MatchStructMemberNames' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_UpdateArrayFromCsvInfo, OwningObject) == 0x000090, "Member 'RuntimeDataTableObject_UpdateArrayFromCsvInfo::OwningObject' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded
// 0x00C8 (0x00C8 - 0x0000)
struct RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded final
{
public:
	struct FRuntimeDataTableCallbackInfo          InCallbackInfo;                                    // 0x0000(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FEasyCsvInfo                           OutCsvInfo;                                        // 0x0028(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	ERuntimeDataTableBackupResultCode             OutResultCode;                                     // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BackupSavePath;                                    // 0x00A0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackupLoadPath;                                    // 0x00B0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded) == 0x000008, "Wrong alignment on RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded");
static_assert(sizeof(RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded) == 0x0000C8, "Wrong size on RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded");
static_assert(offsetof(RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded, InCallbackInfo) == 0x000000, "Member 'RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded::InCallbackInfo' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded, OutCsvInfo) == 0x000028, "Member 'RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded::OutCsvInfo' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded, OutResultCode) == 0x000098, "Member 'RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded::OutResultCode' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded, BackupSavePath) == 0x0000A0, "Member 'RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded::BackupSavePath' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded, BackupLoadPath) == 0x0000B0, "Member 'RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded::BackupLoadPath' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded, ReturnValue) == 0x0000C0, "Member 'RuntimeDataTableObject_ValidateGoogleSheetsDownloadAndLoadBackupIfNeeded::ReturnValue' has a wrong offset!");

// Function RuntimeDataTable.RuntimeDataTableObject.WriteCsvToSheet
// 0x0090 (0x0090 - 0x0000)
struct RuntimeDataTableObject_WriteCsvToSheet final
{
public:
	struct FRuntimeDataTableTokenInfo             InTokenInfo;                                       // 0x0000(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FRuntimeDataTableOperationParams       OperationParams;                                   // 0x0048(0x000C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRuntimeDataTableCallbackInfo& CallbackInfo)> CallOnComplete;        // 0x0054(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InSpreadsheetId;                                   // 0x0068(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSheetId;                                         // 0x0078(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InCsv;                                             // 0x0080(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RuntimeDataTableObject_WriteCsvToSheet) == 0x000008, "Wrong alignment on RuntimeDataTableObject_WriteCsvToSheet");
static_assert(sizeof(RuntimeDataTableObject_WriteCsvToSheet) == 0x000090, "Wrong size on RuntimeDataTableObject_WriteCsvToSheet");
static_assert(offsetof(RuntimeDataTableObject_WriteCsvToSheet, InTokenInfo) == 0x000000, "Member 'RuntimeDataTableObject_WriteCsvToSheet::InTokenInfo' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_WriteCsvToSheet, OperationParams) == 0x000048, "Member 'RuntimeDataTableObject_WriteCsvToSheet::OperationParams' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_WriteCsvToSheet, CallOnComplete) == 0x000054, "Member 'RuntimeDataTableObject_WriteCsvToSheet::CallOnComplete' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_WriteCsvToSheet, InSpreadsheetId) == 0x000068, "Member 'RuntimeDataTableObject_WriteCsvToSheet::InSpreadsheetId' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_WriteCsvToSheet, InSheetId) == 0x000078, "Member 'RuntimeDataTableObject_WriteCsvToSheet::InSheetId' has a wrong offset!");
static_assert(offsetof(RuntimeDataTableObject_WriteCsvToSheet, InCsv) == 0x000080, "Member 'RuntimeDataTableObject_WriteCsvToSheet::InCsv' has a wrong offset!");

}

