#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Vent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_VentState_structs.hpp"
#include "Str_ItemState_structs.hpp"


namespace SDK::Params
{

// Function Vent.Vent_C.All Update Filter Indicator
// 0x0001 (0x0001 - 0x0000)
struct Vent_C_All_Update_Filter_Indicator final
{
public:
	uint8                                         Filter_State;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_All_Update_Filter_Indicator) == 0x000001, "Wrong alignment on Vent_C_All_Update_Filter_Indicator");
static_assert(sizeof(Vent_C_All_Update_Filter_Indicator) == 0x000001, "Wrong size on Vent_C_All_Update_Filter_Indicator");
static_assert(offsetof(Vent_C_All_Update_Filter_Indicator, Filter_State) == 0x000000, "Member 'Vent_C_All_Update_Filter_Indicator::Filter_State' has a wrong offset!");

// Function Vent.Vent_C.All Update Lock Indicator
// 0x0002 (0x0002 - 0x0000)
struct Vent_C_All_Update_Lock_Indicator final
{
public:
	E_VentState                                   State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Filter_State;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_All_Update_Lock_Indicator) == 0x000001, "Wrong alignment on Vent_C_All_Update_Lock_Indicator");
static_assert(sizeof(Vent_C_All_Update_Lock_Indicator) == 0x000002, "Wrong size on Vent_C_All_Update_Lock_Indicator");
static_assert(offsetof(Vent_C_All_Update_Lock_Indicator, State) == 0x000000, "Member 'Vent_C_All_Update_Lock_Indicator::State' has a wrong offset!");
static_assert(offsetof(Vent_C_All_Update_Lock_Indicator, Filter_State) == 0x000001, "Member 'Vent_C_All_Update_Lock_Indicator::Filter_State' has a wrong offset!");

// Function Vent.Vent_C.BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct Vent_C_BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature final
{
public:
	bool                                          bIsVirtualized;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature) == 0x000001, "Wrong alignment on Vent_C_BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature");
static_assert(sizeof(Vent_C_BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature) == 0x000001, "Wrong size on Vent_C_BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature");
static_assert(offsetof(Vent_C_BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature, bIsVirtualized) == 0x000000, "Member 'Vent_C_BndEvt__Vent_Audio_K2Node_ComponentBoundEvent_1_OnAudioVirtualizationChanged__DelegateSignature::bIsVirtualized' has a wrong offset!");

// Function Vent.Vent_C.Check Pitch
// 0x0002 (0x0002 - 0x0000)
struct Vent_C_Check_Pitch final
{
public:
	E_VentState                                   Lock_State;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Filter_State;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_Check_Pitch) == 0x000001, "Wrong alignment on Vent_C_Check_Pitch");
static_assert(sizeof(Vent_C_Check_Pitch) == 0x000002, "Wrong size on Vent_C_Check_Pitch");
static_assert(offsetof(Vent_C_Check_Pitch, Lock_State) == 0x000000, "Member 'Vent_C_Check_Pitch::Lock_State' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Pitch, Filter_State) == 0x000001, "Member 'Vent_C_Check_Pitch::Filter_State' has a wrong offset!");

// Function Vent.Vent_C.Check Screw
// 0x0028 (0x0028 - 0x0000)
struct Vent_C_Check_Screw final
{
public:
	E_VentState                                   LockState_0;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _Open;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _Lock;                                             // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_VentState                                   Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_VentState                                   Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_VentState                                   Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_VentState                                   K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_VentState                                   K2Node_Select_Default_1;                           // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AScrew_C*                               CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_Check_Screw) == 0x000008, "Wrong alignment on Vent_C_Check_Screw");
static_assert(sizeof(Vent_C_Check_Screw) == 0x000028, "Wrong size on Vent_C_Check_Screw");
static_assert(offsetof(Vent_C_Check_Screw, LockState_0) == 0x000000, "Member 'Vent_C_Check_Screw::LockState_0' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, _Open) == 0x000001, "Member 'Vent_C_Check_Screw::_Open' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, _Lock) == 0x000002, "Member 'Vent_C_Check_Screw::_Lock' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, Temp_bool_Variable) == 0x000003, "Member 'Vent_C_Check_Screw::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, Temp_byte_Variable) == 0x000004, "Member 'Vent_C_Check_Screw::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, Temp_byte_Variable_1) == 0x000005, "Member 'Vent_C_Check_Screw::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, Temp_bool_Variable_1) == 0x000006, "Member 'Vent_C_Check_Screw::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, Temp_byte_Variable_2) == 0x000007, "Member 'Vent_C_Check_Screw::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, Temp_int_Array_Index_Variable) == 0x000008, "Member 'Vent_C_Check_Screw::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'Vent_C_Check_Screw::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'Vent_C_Check_Screw::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, K2Node_Select_Default) == 0x000014, "Member 'Vent_C_Check_Screw::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, K2Node_Select_Default_1) == 0x000015, "Member 'Vent_C_Check_Screw::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, CallFunc_Array_Get_Item) == 0x000018, "Member 'Vent_C_Check_Screw::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'Vent_C_Check_Screw::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_Check_Screw, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'Vent_C_Check_Screw::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function Vent.Vent_C.ExecuteUbergraph_Vent
// 0x01D8 (0x01D8 - 0x0000)
struct Vent_C_ExecuteUbergraph_Vent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_1;         // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_2;         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_3;         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue_4;         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AMec_C*                                 K2Node_CustomEvent_Source;                         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_VentState                                   CallFunc_Check_Screw_LockState;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AMec_C* Source)>         K2Node_CreateDelegate_OutputDelegate;              // 0x006C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AScrew_C*                               CallFunc_Array_Get_Item;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0098(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGM_C*                                  K2Node_DynamicCast_AsGM;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStr_ItemState                         K2Node_MakeStruct_Str_ItemState;                   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AScrew_C*                               CallFunc_Array_Get_Item_1;                         // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_VentState                                   K2Node_CustomEvent_Lock_State;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_Filter_State_2;                 // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D7[0x1];                                       // 0x00D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue_1;       // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStr_ItemState                         K2Node_MakeStruct_Str_ItemState_1;                 // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AScrew_C*                               CallFunc_Array_Get_Item_2;                         // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AScrew_C*                               CallFunc_Array_Get_Item_3;                         // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_Filter_State_1;                 // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_VentState                                   K2Node_CustomEvent_State;                          // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_Filter_State;                   // 0x0117(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAudioParameterControllerInterface> CallFunc_SetFloatParameter_self_CastInput; // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAudioParameterControllerInterface> CallFunc_SetFloatParameter_self_CastInput_1; // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAudioParameterControllerInterface> CallFunc_SetFloatParameter_self_CastInput_2; // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAudioParameterControllerInterface> CallFunc_SetFloatParameter_self_CastInput_3; // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsVirtualized;         // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAudioParameterControllerInterface> CallFunc_SetFloatParameter_self_CastInput_4; // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IAudioParameterControllerInterface> CallFunc_SetFloatParameter_self_CastInput_5; // 0x01A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable_1;                              // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Select_Default;                             // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BB[0x1];                                      // 0x01BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetFloatParameter_InFloat_ImplicitCast;   // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_DeltaTime_ImplicitCast;         // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast;           // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_Vent_Pitch_ImplicitCast;        // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_InFloat_ImplicitCast_1; // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_ExecuteUbergraph_Vent) == 0x000008, "Wrong alignment on Vent_C_ExecuteUbergraph_Vent");
static_assert(sizeof(Vent_C_ExecuteUbergraph_Vent) == 0x0001D8, "Wrong size on Vent_C_ExecuteUbergraph_Vent");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, EntryPoint) == 0x000000, "Member 'Vent_C_ExecuteUbergraph_Vent::EntryPoint' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_int_Array_Index_Variable) == 0x000008, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_byte_Variable) == 0x000018, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_int_Array_Index_Variable_2) == 0x00001C, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_int_Array_Index_Variable_3) == 0x000028, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000030, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_bool_Variable) == 0x000038, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SpawnSoundAttached_ReturnValue_1) == 0x000040, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SpawnSoundAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SpawnSoundAttached_ReturnValue_2) == 0x000048, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SpawnSoundAttached_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SpawnSoundAttached_ReturnValue_3) == 0x000050, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SpawnSoundAttached_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SpawnSoundAttached_ReturnValue_4) == 0x000058, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SpawnSoundAttached_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_CustomEvent_Source) == 0x000060, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_CustomEvent_Source' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Check_Screw_LockState) == 0x000068, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Check_Screw_LockState' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000069, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00006A, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00006B, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_CreateDelegate_OutputDelegate) == 0x00006C, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Array_Get_Item) == 0x000080, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_GetGameMode_ReturnValue) == 0x000090, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000098, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_DynamicCast_AsGM) == 0x0000A8, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_DynamicCast_AsGM' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_RandomIntegerInRange_ReturnValue) == 0x0000B4, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_MakeStruct_Str_ItemState) == 0x0000B8, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_MakeStruct_Str_ItemState' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Array_Get_Item_1) == 0x0000C0, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Array_Length_ReturnValue_1) == 0x0000C8, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_int_Loop_Counter_Variable_2) == 0x0000CC, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_CustomEvent_Lock_State) == 0x0000D0, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_CustomEvent_Lock_State' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_CustomEvent_Filter_State_2) == 0x0000D1, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_CustomEvent_Filter_State_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Greater_ByteByte_ReturnValue) == 0x0000D2, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000D3, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000D4, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Less_IntInt_ReturnValue) == 0x0000D5, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_BooleanOR_ReturnValue) == 0x0000D6, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000D8, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_RandomIntegerInRange_ReturnValue_1) == 0x0000DC, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_RandomIntegerInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_MakeStruct_Str_ItemState_1) == 0x0000E0, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_MakeStruct_Str_ItemState_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_int_Loop_Counter_Variable_3) == 0x0000E8, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Array_Get_Item_2) == 0x0000F0, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000F8, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000FC, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Array_Length_ReturnValue_2) == 0x000100, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Less_IntInt_ReturnValue_2) == 0x000104, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Array_Get_Item_3) == 0x000108, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Array_Length_ReturnValue_3) == 0x000110, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_CustomEvent_Filter_State_1) == 0x000114, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_CustomEvent_Filter_State_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_Less_IntInt_ReturnValue_3) == 0x000115, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_CustomEvent_State) == 0x000116, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_CustomEvent_State' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_CustomEvent_Filter_State) == 0x000117, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_CustomEvent_Filter_State' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_SwitchEnum_CmpSuccess) == 0x000118, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_SwitchEnum_CmpSuccess_1) == 0x000119, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_SwitchEnum_CmpSuccess_2) == 0x00011A, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SetFloatParameter_self_CastInput) == 0x000120, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SetFloatParameter_self_CastInput' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000130, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_RandomFloatInRange_ReturnValue) == 0x000138, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SetFloatParameter_self_CastInput_1) == 0x000140, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SetFloatParameter_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SetFloatParameter_self_CastInput_2) == 0x000150, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SetFloatParameter_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000160, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SetFloatParameter_self_CastInput_3) == 0x000168, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SetFloatParameter_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_ComponentBoundEvent_bIsVirtualized) == 0x000178, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_ComponentBoundEvent_bIsVirtualized' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SetFloatParameter_self_CastInput_4) == 0x000180, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SetFloatParameter_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_Event_DeltaSeconds) == 0x000190, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_FInterpTo_ReturnValue) == 0x000198, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x0001A0, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SetFloatParameter_self_CastInput_5) == 0x0001A8, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SetFloatParameter_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, Temp_byte_Variable_1) == 0x0001B8, "Member 'Vent_C_ExecuteUbergraph_Vent::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_SwitchEnum_CmpSuccess_3) == 0x0001B9, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_Select_Default) == 0x0001BA, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SetFloatParameter_InFloat_ImplicitCast) == 0x0001BC, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SetFloatParameter_InFloat_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_FInterpTo_DeltaTime_ImplicitCast) == 0x0001C0, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_FInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_FInterpTo_Current_ImplicitCast) == 0x0001C8, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_FInterpTo_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, K2Node_VariableSet_Vent_Pitch_ImplicitCast) == 0x0001D0, "Member 'Vent_C_ExecuteUbergraph_Vent::K2Node_VariableSet_Vent_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vent_C_ExecuteUbergraph_Vent, CallFunc_SetFloatParameter_InFloat_ImplicitCast_1) == 0x0001D4, "Member 'Vent_C_ExecuteUbergraph_Vent::CallFunc_SetFloatParameter_InFloat_ImplicitCast_1' has a wrong offset!");

// Function Vent.Vent_C.Get Map Position
// 0x0078 (0x0078 - 0x0000)
struct Vent_C_Get_Map_Position final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_Get_Map_Position) == 0x000008, "Wrong alignment on Vent_C_Get_Map_Position");
static_assert(sizeof(Vent_C_Get_Map_Position) == 0x000078, "Wrong size on Vent_C_Get_Map_Position");
static_assert(offsetof(Vent_C_Get_Map_Position, Location) == 0x000000, "Member 'Vent_C_Get_Map_Position::Location' has a wrong offset!");
static_assert(offsetof(Vent_C_Get_Map_Position, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'Vent_C_Get_Map_Position::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_Get_Map_Position, CallFunc_BreakVector_X) == 0x000030, "Member 'Vent_C_Get_Map_Position::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Vent_C_Get_Map_Position, CallFunc_BreakVector_Y) == 0x000038, "Member 'Vent_C_Get_Map_Position::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Vent_C_Get_Map_Position, CallFunc_BreakVector_Z) == 0x000040, "Member 'Vent_C_Get_Map_Position::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Vent_C_Get_Map_Position, CallFunc_BreakVector_X_1) == 0x000048, "Member 'Vent_C_Get_Map_Position::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(Vent_C_Get_Map_Position, CallFunc_BreakVector_Y_1) == 0x000050, "Member 'Vent_C_Get_Map_Position::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(Vent_C_Get_Map_Position, CallFunc_BreakVector_Z_1) == 0x000058, "Member 'Vent_C_Get_Map_Position::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(Vent_C_Get_Map_Position, CallFunc_MakeVector_ReturnValue) == 0x000060, "Member 'Vent_C_Get_Map_Position::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function Vent.Vent_C.OnRep_FilterState
// 0x0001 (0x0001 - 0x0000)
struct Vent_C_OnRep_FilterState final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_OnRep_FilterState) == 0x000001, "Wrong alignment on Vent_C_OnRep_FilterState");
static_assert(sizeof(Vent_C_OnRep_FilterState) == 0x000001, "Wrong size on Vent_C_OnRep_FilterState");
static_assert(offsetof(Vent_C_OnRep_FilterState, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'Vent_C_OnRep_FilterState::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function Vent.Vent_C.OnRep_LockState
// 0x0020 (0x0020 - 0x0000)
struct Vent_C_OnRep_LockState final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AScrew_C*                               CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_OnRep_LockState) == 0x000008, "Wrong alignment on Vent_C_OnRep_LockState");
static_assert(sizeof(Vent_C_OnRep_LockState) == 0x000020, "Wrong size on Vent_C_OnRep_LockState");
static_assert(offsetof(Vent_C_OnRep_LockState, Temp_int_Array_Index_Variable) == 0x000000, "Member 'Vent_C_OnRep_LockState::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_OnRep_LockState, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'Vent_C_OnRep_LockState::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_OnRep_LockState, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'Vent_C_OnRep_LockState::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_OnRep_LockState, CallFunc_Array_Get_Item) == 0x000010, "Member 'Vent_C_OnRep_LockState::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Vent_C_OnRep_LockState, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'Vent_C_OnRep_LockState::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_OnRep_LockState, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'Vent_C_OnRep_LockState::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_OnRep_LockState, CallFunc_HasAuthority_ReturnValue) == 0x00001D, "Member 'Vent_C_OnRep_LockState::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_OnRep_LockState, CallFunc_Greater_ByteByte_ReturnValue) == 0x00001E, "Member 'Vent_C_OnRep_LockState::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_OnRep_LockState, K2Node_SwitchEnum_CmpSuccess) == 0x00001F, "Member 'Vent_C_OnRep_LockState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Vent.Vent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Vent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_ReceiveTick) == 0x000004, "Wrong alignment on Vent_C_ReceiveTick");
static_assert(sizeof(Vent_C_ReceiveTick) == 0x000004, "Wrong size on Vent_C_ReceiveTick");
static_assert(offsetof(Vent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Vent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Vent.Vent_C.Screw Change
// 0x0008 (0x0008 - 0x0000)
struct Vent_C_Screw_Change final
{
public:
	class AMec_C*                                 Source;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_Screw_Change) == 0x000008, "Wrong alignment on Vent_C_Screw_Change");
static_assert(sizeof(Vent_C_Screw_Change) == 0x000008, "Wrong size on Vent_C_Screw_Change");
static_assert(offsetof(Vent_C_Screw_Change, Source) == 0x000000, "Member 'Vent_C_Screw_Change::Source' has a wrong offset!");

// Function Vent.Vent_C.Update Filter Indicator
// 0x0068 (0x0068 - 0x0000)
struct Vent_C_Update_Filter_Indicator final
{
public:
	uint8                                         Filter_State;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lock;                                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0008(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x0020(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_2;                            // 0x0038(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0050(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_Update_Filter_Indicator) == 0x000008, "Wrong alignment on Vent_C_Update_Filter_Indicator");
static_assert(sizeof(Vent_C_Update_Filter_Indicator) == 0x000068, "Wrong size on Vent_C_Update_Filter_Indicator");
static_assert(offsetof(Vent_C_Update_Filter_Indicator, Filter_State) == 0x000000, "Member 'Vent_C_Update_Filter_Indicator::Filter_State' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Filter_Indicator, Lock) == 0x000001, "Member 'Vent_C_Update_Filter_Indicator::Lock' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Filter_Indicator, Temp_byte_Variable) == 0x000002, "Member 'Vent_C_Update_Filter_Indicator::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Filter_Indicator, Temp_struct_Variable) == 0x000008, "Member 'Vent_C_Update_Filter_Indicator::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Filter_Indicator, Temp_struct_Variable_1) == 0x000020, "Member 'Vent_C_Update_Filter_Indicator::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Filter_Indicator, Temp_struct_Variable_2) == 0x000038, "Member 'Vent_C_Update_Filter_Indicator::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Filter_Indicator, K2Node_Select_Default) == 0x000050, "Member 'Vent_C_Update_Filter_Indicator::K2Node_Select_Default' has a wrong offset!");

// Function Vent.Vent_C.Update Lock Indicator
// 0x00B0 (0x00B0 - 0x0000)
struct Vent_C_Update_Lock_Indicator final
{
public:
	E_VentState                                   Lock_State;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Filter_State;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lock;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_VentState                                   Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0008(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x0020(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_2;                            // 0x0038(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_3;                            // 0x0050(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_4;                            // 0x0068(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0088(0x0018)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SpawnSoundAttached_PitchMultiplier_ImplicitCast; // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_Update_Lock_Indicator) == 0x000008, "Wrong alignment on Vent_C_Update_Lock_Indicator");
static_assert(sizeof(Vent_C_Update_Lock_Indicator) == 0x0000B0, "Wrong size on Vent_C_Update_Lock_Indicator");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, Lock_State) == 0x000000, "Member 'Vent_C_Update_Lock_Indicator::Lock_State' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, Filter_State) == 0x000001, "Member 'Vent_C_Update_Lock_Indicator::Filter_State' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, Lock) == 0x000002, "Member 'Vent_C_Update_Lock_Indicator::Lock' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, Temp_byte_Variable) == 0x000003, "Member 'Vent_C_Update_Lock_Indicator::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, Temp_struct_Variable) == 0x000008, "Member 'Vent_C_Update_Lock_Indicator::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, Temp_struct_Variable_1) == 0x000020, "Member 'Vent_C_Update_Lock_Indicator::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, Temp_struct_Variable_2) == 0x000038, "Member 'Vent_C_Update_Lock_Indicator::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, Temp_struct_Variable_3) == 0x000050, "Member 'Vent_C_Update_Lock_Indicator::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, Temp_struct_Variable_4) == 0x000068, "Member 'Vent_C_Update_Lock_Indicator::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, CallFunc_RandomFloatInRange_ReturnValue) == 0x000080, "Member 'Vent_C_Update_Lock_Indicator::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, K2Node_Select_Default) == 0x000088, "Member 'Vent_C_Update_Lock_Indicator::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, CallFunc_SpawnSoundAttached_ReturnValue) == 0x0000A0, "Member 'Vent_C_Update_Lock_Indicator::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_Update_Lock_Indicator, CallFunc_SpawnSoundAttached_PitchMultiplier_ImplicitCast) == 0x0000A8, "Member 'Vent_C_Update_Lock_Indicator::CallFunc_SpawnSoundAttached_PitchMultiplier_ImplicitCast' has a wrong offset!");

// Function Vent.Vent_C.UserConstructionScript
// 0x0040 (0x0040 - 0x0000)
struct Vent_C_UserConstructionScript final
{
public:
	class AScrew_C*                               K2Node_DynamicCast_AsScrew;                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AScrew_C*                               K2Node_DynamicCast_AsScrew_1;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASoundPath_C*                           K2Node_DynamicCast_AsSound_Path;                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AItemSlot_C*                            K2Node_DynamicCast_AsItem_Slot;                    // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vent_C_UserConstructionScript) == 0x000008, "Wrong alignment on Vent_C_UserConstructionScript");
static_assert(sizeof(Vent_C_UserConstructionScript) == 0x000040, "Wrong size on Vent_C_UserConstructionScript");
static_assert(offsetof(Vent_C_UserConstructionScript, K2Node_DynamicCast_AsScrew) == 0x000000, "Member 'Vent_C_UserConstructionScript::K2Node_DynamicCast_AsScrew' has a wrong offset!");
static_assert(offsetof(Vent_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'Vent_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Vent_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue) == 0x00000C, "Member 'Vent_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vent_C_UserConstructionScript, K2Node_DynamicCast_AsScrew_1) == 0x000010, "Member 'Vent_C_UserConstructionScript::K2Node_DynamicCast_AsScrew_1' has a wrong offset!");
static_assert(offsetof(Vent_C_UserConstructionScript, K2Node_DynamicCast_bSuccess_1) == 0x000018, "Member 'Vent_C_UserConstructionScript::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Vent_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue_1) == 0x00001C, "Member 'Vent_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vent_C_UserConstructionScript, K2Node_DynamicCast_AsSound_Path) == 0x000020, "Member 'Vent_C_UserConstructionScript::K2Node_DynamicCast_AsSound_Path' has a wrong offset!");
static_assert(offsetof(Vent_C_UserConstructionScript, K2Node_DynamicCast_bSuccess_2) == 0x000028, "Member 'Vent_C_UserConstructionScript::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Vent_C_UserConstructionScript, K2Node_DynamicCast_AsItem_Slot) == 0x000030, "Member 'Vent_C_UserConstructionScript::K2Node_DynamicCast_AsItem_Slot' has a wrong offset!");
static_assert(offsetof(Vent_C_UserConstructionScript, K2Node_DynamicCast_bSuccess_3) == 0x000038, "Member 'Vent_C_UserConstructionScript::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

}

